(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["MIDI2XML"] = factory();
	else
		root["MIDI2XML"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "../midi-tools/build/midi-tools.js":
/*!*****************************************!*\
  !*** ../midi-tools/build/midi-tools.js ***!
  \*****************************************/
/***/ ((module) => {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else {}
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __nested_webpack_require_543__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_543__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__nested_webpack_require_543__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__nested_webpack_require_543__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__nested_webpack_require_543__.d = function(exports, name, getter) {
/******/ 		if(!__nested_webpack_require_543__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__nested_webpack_require_543__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__nested_webpack_require_543__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __nested_webpack_require_543__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__nested_webpack_require_543__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __nested_webpack_require_543__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__nested_webpack_require_543__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__nested_webpack_require_543__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__nested_webpack_require_543__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__nested_webpack_require_543__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __nested_webpack_require_543__(__nested_webpack_require_543__.s = "./src/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  for (var i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __nested_webpack_require_8444__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __nested_webpack_require_8444__(/*! base64-js */ "./node_modules/base64-js/index.js")
var ieee754 = __nested_webpack_require_8444__(/*! ieee754 */ "./node_modules/ieee754/index.js")
var isArray = __nested_webpack_require_8444__(/*! isarray */ "./node_modules/isarray/index.js")

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(this, __nested_webpack_require_8444__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/debug/src/browser.js":
/*!*******************************************!*\
  !*** ./node_modules/debug/src/browser.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __nested_webpack_require_57693__) {

/* WEBPACK VAR INJECTION */(function(process) {/* eslint-env browser */

/**
 * This is the web browser implementation of `debug()`.
 */

exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();

/**
 * Colors.
 */

exports.colors = [
	'#0000CC',
	'#0000FF',
	'#0033CC',
	'#0033FF',
	'#0066CC',
	'#0066FF',
	'#0099CC',
	'#0099FF',
	'#00CC00',
	'#00CC33',
	'#00CC66',
	'#00CC99',
	'#00CCCC',
	'#00CCFF',
	'#3300CC',
	'#3300FF',
	'#3333CC',
	'#3333FF',
	'#3366CC',
	'#3366FF',
	'#3399CC',
	'#3399FF',
	'#33CC00',
	'#33CC33',
	'#33CC66',
	'#33CC99',
	'#33CCCC',
	'#33CCFF',
	'#6600CC',
	'#6600FF',
	'#6633CC',
	'#6633FF',
	'#66CC00',
	'#66CC33',
	'#9900CC',
	'#9900FF',
	'#9933CC',
	'#9933FF',
	'#99CC00',
	'#99CC33',
	'#CC0000',
	'#CC0033',
	'#CC0066',
	'#CC0099',
	'#CC00CC',
	'#CC00FF',
	'#CC3300',
	'#CC3333',
	'#CC3366',
	'#CC3399',
	'#CC33CC',
	'#CC33FF',
	'#CC6600',
	'#CC6633',
	'#CC9900',
	'#CC9933',
	'#CCCC00',
	'#CCCC33',
	'#FF0000',
	'#FF0033',
	'#FF0066',
	'#FF0099',
	'#FF00CC',
	'#FF00FF',
	'#FF3300',
	'#FF3333',
	'#FF3366',
	'#FF3399',
	'#FF33CC',
	'#FF33FF',
	'#FF6600',
	'#FF6633',
	'#FF9900',
	'#FF9933',
	'#FFCC00',
	'#FFCC33'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

// eslint-disable-next-line complexity
function useColors() {
	// NB: In an Electron preload script, document will be defined but not fully
	// initialized. Since we know we're in Chrome, we'll just detect this case
	// explicitly
	if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
		return true;
	}

	// Internet Explorer and Edge do not support colors.
	if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
		return false;
	}

	// Is webkit? http://stackoverflow.com/a/16459606/376773
	// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
	return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
		// Is firebug? http://stackoverflow.com/a/398120/376773
		(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
		// Is firefox >= v31?
		// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
		// Double check webkit in userAgent just in case we are in a worker
		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
	args[0] = (this.useColors ? '%c' : '') +
		this.namespace +
		(this.useColors ? ' %c' : ' ') +
		args[0] +
		(this.useColors ? '%c ' : ' ') +
		'+' + module.exports.humanize(this.diff);

	if (!this.useColors) {
		return;
	}

	const c = 'color: ' + this.color;
	args.splice(1, 0, c, 'color: inherit');

	// The final "%c" is somewhat tricky, because there could be other
	// arguments passed either before or after the %c, so we need to
	// figure out the correct index to insert the CSS into
	let index = 0;
	let lastC = 0;
	args[0].replace(/%[a-zA-Z%]/g, match => {
		if (match === '%%') {
			return;
		}
		index++;
		if (match === '%c') {
			// We only are interested in the *last* %c
			// (the user may have provided their own)
			lastC = index;
		}
	});

	args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */
function log(...args) {
	// This hackery is required for IE8/9, where
	// the `console.log` function doesn't have 'apply'
	return typeof console === 'object' &&
		console.log &&
		console.log(...args);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */
function save(namespaces) {
	try {
		if (namespaces) {
			exports.storage.setItem('debug', namespaces);
		} else {
			exports.storage.removeItem('debug');
		}
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */
function load() {
	let r;
	try {
		r = exports.storage.getItem('debug');
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}

	// If debug isn't set in LS, and we're in Electron, try to load $DEBUG
	if (!r && typeof process !== 'undefined' && 'env' in process) {
		r = process.env.DEBUG;
	}

	return r;
}

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
	try {
		// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
		// The Browser also has localStorage in the global context.
		return localStorage;
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}
}

module.exports = __nested_webpack_require_57693__(/*! ./common */ "./node_modules/debug/src/common.js")(exports);

const {formatters} = module.exports;

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

formatters.j = function (v) {
	try {
		return JSON.stringify(v);
	} catch (error) {
		return '[UnexpectedJSONParseError]: ' + error.message;
	}
};

/* WEBPACK VAR INJECTION */}.call(this, __nested_webpack_require_57693__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/debug/src/common.js":
/*!******************************************!*\
  !*** ./node_modules/debug/src/common.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __nested_webpack_require_64046__) {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */

function setup(env) {
	createDebug.debug = createDebug;
	createDebug.default = createDebug;
	createDebug.coerce = coerce;
	createDebug.disable = disable;
	createDebug.enable = enable;
	createDebug.enabled = enabled;
	createDebug.humanize = __nested_webpack_require_64046__(/*! ms */ "./node_modules/ms/index.js");

	Object.keys(env).forEach(key => {
		createDebug[key] = env[key];
	});

	/**
	* Active `debug` instances.
	*/
	createDebug.instances = [];

	/**
	* The currently active debug mode names, and names to skip.
	*/

	createDebug.names = [];
	createDebug.skips = [];

	/**
	* Map of special "%n" handling functions, for the debug "format" argument.
	*
	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	*/
	createDebug.formatters = {};

	/**
	* Selects a color for a debug namespace
	* @param {String} namespace The namespace string for the for the debug instance to be colored
	* @return {Number|String} An ANSI color code for the given namespace
	* @api private
	*/
	function selectColor(namespace) {
		let hash = 0;

		for (let i = 0; i < namespace.length; i++) {
			hash = ((hash << 5) - hash) + namespace.charCodeAt(i);
			hash |= 0; // Convert to 32bit integer
		}

		return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
	}
	createDebug.selectColor = selectColor;

	/**
	* Create a debugger with the given `namespace`.
	*
	* @param {String} namespace
	* @return {Function}
	* @api public
	*/
	function createDebug(namespace) {
		let prevTime;

		function debug(...args) {
			// Disabled?
			if (!debug.enabled) {
				return;
			}

			const self = debug;

			// Set `diff` timestamp
			const curr = Number(new Date());
			const ms = curr - (prevTime || curr);
			self.diff = ms;
			self.prev = prevTime;
			self.curr = curr;
			prevTime = curr;

			args[0] = createDebug.coerce(args[0]);

			if (typeof args[0] !== 'string') {
				// Anything else let's inspect with %O
				args.unshift('%O');
			}

			// Apply any `formatters` transformations
			let index = 0;
			args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
				// If we encounter an escaped % then don't increase the array index
				if (match === '%%') {
					return match;
				}
				index++;
				const formatter = createDebug.formatters[format];
				if (typeof formatter === 'function') {
					const val = args[index];
					match = formatter.call(self, val);

					// Now we need to remove `args[index]` since it's inlined in the `format`
					args.splice(index, 1);
					index--;
				}
				return match;
			});

			// Apply env-specific formatting (colors, etc.)
			createDebug.formatArgs.call(self, args);

			const logFn = self.log || createDebug.log;
			logFn.apply(self, args);
		}

		debug.namespace = namespace;
		debug.enabled = createDebug.enabled(namespace);
		debug.useColors = createDebug.useColors();
		debug.color = selectColor(namespace);
		debug.destroy = destroy;
		debug.extend = extend;
		// Debug.formatArgs = formatArgs;
		// debug.rawLog = rawLog;

		// env-specific initialization logic for debug instances
		if (typeof createDebug.init === 'function') {
			createDebug.init(debug);
		}

		createDebug.instances.push(debug);

		return debug;
	}

	function destroy() {
		const index = createDebug.instances.indexOf(this);
		if (index !== -1) {
			createDebug.instances.splice(index, 1);
			return true;
		}
		return false;
	}

	function extend(namespace, delimiter) {
		const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
		newDebug.log = this.log;
		return newDebug;
	}

	/**
	* Enables a debug mode by namespaces. This can include modes
	* separated by a colon and wildcards.
	*
	* @param {String} namespaces
	* @api public
	*/
	function enable(namespaces) {
		createDebug.save(namespaces);

		createDebug.names = [];
		createDebug.skips = [];

		let i;
		const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
		const len = split.length;

		for (i = 0; i < len; i++) {
			if (!split[i]) {
				// ignore empty strings
				continue;
			}

			namespaces = split[i].replace(/\*/g, '.*?');

			if (namespaces[0] === '-') {
				createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
			} else {
				createDebug.names.push(new RegExp('^' + namespaces + '$'));
			}
		}

		for (i = 0; i < createDebug.instances.length; i++) {
			const instance = createDebug.instances[i];
			instance.enabled = createDebug.enabled(instance.namespace);
		}
	}

	/**
	* Disable debug output.
	*
	* @return {String} namespaces
	* @api public
	*/
	function disable() {
		const namespaces = [
			...createDebug.names.map(toNamespace),
			...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)
		].join(',');
		createDebug.enable('');
		return namespaces;
	}

	/**
	* Returns true if the given mode name is enabled, false otherwise.
	*
	* @param {String} name
	* @return {Boolean}
	* @api public
	*/
	function enabled(name) {
		if (name[name.length - 1] === '*') {
			return true;
		}

		let i;
		let len;

		for (i = 0, len = createDebug.skips.length; i < len; i++) {
			if (createDebug.skips[i].test(name)) {
				return false;
			}
		}

		for (i = 0, len = createDebug.names.length; i < len; i++) {
			if (createDebug.names[i].test(name)) {
				return true;
			}
		}

		return false;
	}

	/**
	* Convert regexp to namespace
	*
	* @param {RegExp} regxep
	* @return {String} namespace
	* @api private
	*/
	function toNamespace(regexp) {
		return regexp.toString()
			.substring(2, regexp.toString().length - 2)
			.replace(/\.\*\?$/, '*');
	}

	/**
	* Coerce `val`.
	*
	* @param {Mixed} val
	* @return {Mixed}
	* @api private
	*/
	function coerce(val) {
		if (val instanceof Error) {
			return val.stack || val.message;
		}
		return val;
	}

	createDebug.enable(createDebug.load());

	return createDebug;
}

module.exports = setup;


/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ "./node_modules/ms/index.js":
/*!**********************************!*\
  !*** ./node_modules/ms/index.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\-?\d?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'weeks':
    case 'week':
    case 'w':
      return n * w;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (msAbs >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (msAbs >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (msAbs >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return plural(ms, msAbs, d, 'day');
  }
  if (msAbs >= h) {
    return plural(ms, msAbs, h, 'hour');
  }
  if (msAbs >= m) {
    return plural(ms, msAbs, m, 'minute');
  }
  if (msAbs >= s) {
    return plural(ms, msAbs, s, 'second');
  }
  return ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, msAbs, n, name) {
  var isPlural = msAbs >= n * 1.5;
  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}


/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./src/MIDIReader/MIDIEventCreator.ts":
/*!********************************************!*\
  !*** ./src/MIDIReader/MIDIEventCreator.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __nested_webpack_require_82698__) {

"use strict";

var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var Events = __importStar(__nested_webpack_require_82698__(/*! ./MIDIEvents */ "./src/MIDIReader/MIDIEvents/index.ts"));
var MIDIMetaEventCreator_1 = __nested_webpack_require_82698__(/*! ./MIDIMetaEventCreator */ "./src/MIDIReader/MIDIMetaEventCreator.ts");
var variable_length_value_1 = __nested_webpack_require_82698__(/*! ../utils/variable-length-value */ "./src/utils/variable-length-value.ts");
var createNoteOffEventFromBytes = function (statusByte, dataView, startIndex) {
    if (startIndex === void 0) { startIndex = 0; }
    var channel = (statusByte & 0xF) + 1;
    var noteNumber = dataView.getUint8(startIndex);
    var release = dataView.getUint8(startIndex + 1);
    return [
        2,
        new Events.NoteOffEvent({
            channel: channel,
            noteNumber: noteNumber,
            release: release,
        })
    ];
};
var createNoteOnEventFromBytes = function (statusByte, dataView, startIndex) {
    if (startIndex === void 0) { startIndex = 0; }
    var channel = (statusByte & 0xF) + 1;
    var noteNumber = dataView.getUint8(startIndex);
    var velocity = dataView.getUint8(startIndex + 1);
    return [
        2,
        new Events.NoteOnEvent({
            channel: channel,
            noteNumber: noteNumber,
            velocity: velocity,
        })
    ];
};
var createSysexEventFromBytes = function (statusByte, dataView, startIndex) {
    if (startIndex === void 0) { startIndex = 0; }
    var _a = variable_length_value_1.fromVariableLengthValue(dataView.buffer, dataView.byteOffset + startIndex), bytesRead = _a[0], dataLength = _a[1];
    return [
        bytesRead + dataLength,
        new Events.SysExEvent({
            eventData: new Uint8Array(dataView.buffer, dataView.byteOffset + startIndex, dataLength),
        })
    ];
};
var createProgramChangeEventFromBytes = function (statusByte, dataView, startIndex) {
    if (startIndex === void 0) { startIndex = 0; }
    var channel = (statusByte & 0xF) + 1;
    var programNumber = dataView.getUint8(startIndex);
    return [
        1,
        new Events.ProgramChangeEvent({
            channel: channel,
            programNumber: programNumber,
        })
    ];
};
var createControllerChangeEventFromBytes = function (statusByte, dataView, startIndex) {
    if (startIndex === void 0) { startIndex = 0; }
    var channel = (statusByte & 0xF) + 1;
    var controllerNumber = dataView.getUint8(startIndex);
    var controllerValue = dataView.getUint8(startIndex + 1);
    return [
        2,
        new Events.ControllerChangeEvent({
            channel: channel,
            controllerNumber: controllerNumber,
            controllerValue: controllerValue,
        })
    ];
};
var createPolyphonicAftertouchEventFromBytes = function (statusByte, dataView, startIndex) {
    var channel = (statusByte & 0xF) + 1;
    var noteNumber = dataView.getUint8(startIndex);
    var pressure = dataView.getUint8(startIndex + 1);
    return [
        2,
        new Events.PolyphonicAftertouchEvent({
            channel: channel,
            noteNumber: noteNumber,
            pressure: pressure,
        })
    ];
};
var createChannelAftertouchEventFromBytes = function (statusByte, dataView, startIndex) {
    var channel = (statusByte & 0xF) + 1;
    var pressure = dataView.getUint8(startIndex + 1);
    return [
        1,
        new Events.ChannelAftertouchEvent({
            channel: channel,
            pressure: pressure,
        })
    ];
};
var createPitchBendEventFromBytes = function (statusByte, dataView, startIndex) {
    var channel = (statusByte & 0xF) + 1;
    var leastSignificantByte = dataView.getUint8(startIndex);
    var mostSignificantByte = dataView.getUint8(startIndex + 1);
    var value = ((mostSignificantByte & 0x7F) << 7) + (leastSignificantByte & 0x7F);
    return [
        2,
        new Events.PitchBendEvent({
            channel: channel,
            value: value,
        })
    ];
};
var getCreateFunction = function (statusByte) {
    if (statusByte >> 4 === 0x8) {
        return createNoteOffEventFromBytes;
    }
    if (statusByte >> 4 === 0x9) {
        return createNoteOnEventFromBytes;
    }
    if (statusByte >> 4 === 0xA) {
        return createPolyphonicAftertouchEventFromBytes;
    }
    if (statusByte >> 4 === 0xB) {
        return createControllerChangeEventFromBytes;
    }
    if (statusByte >> 4 === 0xC) {
        return createProgramChangeEventFromBytes;
    }
    if (statusByte >> 4 === 0xD) {
        return createChannelAftertouchEventFromBytes;
    }
    if (statusByte >> 4 === 0xE) {
        return createPitchBendEventFromBytes;
    }
    if (statusByte === 0xF0) {
        return createSysexEventFromBytes;
    }
    if (statusByte === 0xFF) {
        return MIDIMetaEventCreator_1.createMetaEventFromBytes;
    }
    return null;
};
exports.eventFromBytes = function (dataView, startIndex, previousStatusByte) {
    if (startIndex === void 0) { startIndex = 0; }
    if (previousStatusByte === void 0) { previousStatusByte = null; }
    var statusByte = dataView.getUint8(startIndex);
    var createFunction = getCreateFunction(statusByte);
    var bytesRead = 0;
    if (createFunction === null && previousStatusByte !== null) {
        statusByte = previousStatusByte;
        createFunction = getCreateFunction(statusByte);
    }
    else {
        // The byte at startIndex was the status byte, so skip it in the data
        startIndex += 1;
        bytesRead += 1;
    }
    if (createFunction !== null) {
        var _a = createFunction(statusByte, dataView, startIndex), eventBytesRead = _a[0], event_1 = _a[1];
        bytesRead += eventBytesRead;
        return {
            bytesRead: bytesRead,
            event: event_1,
            statusByte: statusByte,
        };
    }
    return null;
};


/***/ }),

/***/ "./src/MIDIReader/MIDIEvents/ChannelAftertouch.ts":
/*!********************************************************!*\
  !*** ./src/MIDIReader/MIDIEvents/ChannelAftertouch.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ChannelAftertouchEvent = /** @class */ (function () {
    function ChannelAftertouchEvent(_a) {
        var channel = _a.channel, pressure = _a.pressure;
        this.type = 32 /* ChannelAftertouch */;
        this.channel = channel;
        this.pressure = pressure;
    }
    return ChannelAftertouchEvent;
}());
exports.ChannelAftertouchEvent = ChannelAftertouchEvent;


/***/ }),

/***/ "./src/MIDIReader/MIDIEvents/ControllerChange.ts":
/*!*******************************************************!*\
  !*** ./src/MIDIReader/MIDIEvents/ControllerChange.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ControllerChangeEvent = /** @class */ (function () {
    function ControllerChangeEvent(_a) {
        var channel = _a.channel, controllerNumber = _a.controllerNumber, controllerValue = _a.controllerValue;
        this.type = 8 /* ControllerChange */;
        this.channel = channel;
        this.controllerNumber = controllerNumber;
        this.controllerValue = controllerValue;
    }
    return ControllerChangeEvent;
}());
exports.ControllerChangeEvent = ControllerChangeEvent;


/***/ }),

/***/ "./src/MIDIReader/MIDIEvents/Meta/ChannelPrefix.ts":
/*!*********************************************************!*\
  !*** ./src/MIDIReader/MIDIEvents/Meta/ChannelPrefix.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ChannelPrefixEvent = /** @class */ (function () {
    function ChannelPrefixEvent(_a) {
        var channelNumber = _a.channelNumber;
        this.type = 1024 /* MetaChannelPrefix */;
        this.channelNumber = channelNumber;
    }
    return ChannelPrefixEvent;
}());
exports.ChannelPrefixEvent = ChannelPrefixEvent;


/***/ }),

/***/ "./src/MIDIReader/MIDIEvents/Meta/Copyright.ts":
/*!*****************************************************!*\
  !*** ./src/MIDIReader/MIDIEvents/Meta/Copyright.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var CopyrightEvent = /** @class */ (function () {
    function CopyrightEvent(_a) {
        var copyright = _a.copyright;
        this.type = 4096 /* MetaCopyright */;
        this.copyright = copyright;
    }
    return CopyrightEvent;
}());
exports.CopyrightEvent = CopyrightEvent;


/***/ }),

/***/ "./src/MIDIReader/MIDIEvents/Meta/CuePoint.ts":
/*!****************************************************!*\
  !*** ./src/MIDIReader/MIDIEvents/Meta/CuePoint.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var CuePointEvent = /** @class */ (function () {
    function CuePointEvent(_a) {
        var cueText = _a.cueText;
        this.type = 4194304 /* MetaCuePoint */;
        this.cueText = cueText;
    }
    return CuePointEvent;
}());
exports.CuePointEvent = CuePointEvent;


/***/ }),

/***/ "./src/MIDIReader/MIDIEvents/Meta/InstrumentName.ts":
/*!**********************************************************!*\
  !*** ./src/MIDIReader/MIDIEvents/Meta/InstrumentName.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var InstrumentNameEvent = /** @class */ (function () {
    function InstrumentNameEvent(_a) {
        var name = _a.name;
        this.type = 65536 /* MetaInstrumentName */;
        this.name = name;
    }
    return InstrumentNameEvent;
}());
exports.InstrumentNameEvent = InstrumentNameEvent;


/***/ }),

/***/ "./src/MIDIReader/MIDIEvents/Meta/KeySignature.ts":
/*!********************************************************!*\
  !*** ./src/MIDIReader/MIDIEvents/Meta/KeySignature.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var KeySignatureEvent = /** @class */ (function () {
    function KeySignatureEvent(_a) {
        var sharps = _a.sharps, isMajor = _a.isMajor;
        this.type = 524288 /* MetaKeySignature */;
        this.sharps = sharps;
        this.isMajor = isMajor;
    }
    return KeySignatureEvent;
}());
exports.KeySignatureEvent = KeySignatureEvent;


/***/ }),

/***/ "./src/MIDIReader/MIDIEvents/Meta/Lyric.ts":
/*!*************************************************!*\
  !*** ./src/MIDIReader/MIDIEvents/Meta/Lyric.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var LyricEvent = /** @class */ (function () {
    function LyricEvent(_a) {
        var lyric = _a.lyric;
        this.type = 262144 /* MetaLyric */;
        this.lyric = lyric;
    }
    return LyricEvent;
}());
exports.LyricEvent = LyricEvent;


/***/ }),

/***/ "./src/MIDIReader/MIDIEvents/Meta/Marker.ts":
/*!**************************************************!*\
  !*** ./src/MIDIReader/MIDIEvents/Meta/Marker.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var MarkerEvent = /** @class */ (function () {
    function MarkerEvent(_a) {
        var marker = _a.marker;
        this.type = 1048576 /* MetaMarker */;
        this.marker = marker;
    }
    return MarkerEvent;
}());
exports.MarkerEvent = MarkerEvent;


/***/ }),

/***/ "./src/MIDIReader/MIDIEvents/Meta/PortPrefix.ts":
/*!******************************************************!*\
  !*** ./src/MIDIReader/MIDIEvents/Meta/PortPrefix.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var PortPrefixEvent = /** @class */ (function () {
    function PortPrefixEvent(_a) {
        var portNumber = _a.portNumber;
        this.type = 512 /* MetaPortPrefix */;
        this.portNumber = portNumber;
    }
    return PortPrefixEvent;
}());
exports.PortPrefixEvent = PortPrefixEvent;


/***/ }),

/***/ "./src/MIDIReader/MIDIEvents/Meta/SMPTEOffset.ts":
/*!*******************************************************!*\
  !*** ./src/MIDIReader/MIDIEvents/Meta/SMPTEOffset.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SMPTEOffsetEvent = /** @class */ (function () {
    function SMPTEOffsetEvent(_a) {
        var hours = _a.hours, minutes = _a.minutes, seconds = _a.seconds, frames = _a.frames, fractionalFrames = _a.fractionalFrames;
        this.type = 32768 /* MetaSMPTEOffset */;
        this.hours = hours;
        this.minutes = minutes;
        this.seconds = seconds;
        this.frames = frames;
        this.fractionalFrames = fractionalFrames;
    }
    return SMPTEOffsetEvent;
}());
exports.SMPTEOffsetEvent = SMPTEOffsetEvent;


/***/ }),

/***/ "./src/MIDIReader/MIDIEvents/Meta/SequenceNumber.ts":
/*!**********************************************************!*\
  !*** ./src/MIDIReader/MIDIEvents/Meta/SequenceNumber.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SequenceNumberEvent = /** @class */ (function () {
    function SequenceNumberEvent(_a) {
        var sequenceNumber = _a.sequenceNumber;
        this.type = 256 /* MetaSequenceNumber */;
        this.sequenceNumber = sequenceNumber;
    }
    return SequenceNumberEvent;
}());
exports.SequenceNumberEvent = SequenceNumberEvent;


/***/ }),

/***/ "./src/MIDIReader/MIDIEvents/Meta/SequencerSpecific.ts":
/*!*************************************************************!*\
  !*** ./src/MIDIReader/MIDIEvents/Meta/SequencerSpecific.ts ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SequencerSpecificEvent = /** @class */ (function () {
    function SequencerSpecificEvent(_a) {
        var id = _a.id, data = _a.data;
        this.type = 2097152 /* MetaSequencerSpecific */;
        this.id = id;
        this.data = data;
    }
    return SequencerSpecificEvent;
}());
exports.SequencerSpecificEvent = SequencerSpecificEvent;


/***/ }),

/***/ "./src/MIDIReader/MIDIEvents/Meta/SetTempo.ts":
/*!****************************************************!*\
  !*** ./src/MIDIReader/MIDIEvents/Meta/SetTempo.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SetTempoEvent = /** @class */ (function () {
    function SetTempoEvent(_a) {
        var microsecondsPerQuarterNote = _a.microsecondsPerQuarterNote;
        this.type = 8192 /* MetaSetTempo */;
        this.microsecondsPerQuarterNote = microsecondsPerQuarterNote;
    }
    return SetTempoEvent;
}());
exports.SetTempoEvent = SetTempoEvent;


/***/ }),

/***/ "./src/MIDIReader/MIDIEvents/Meta/Text.ts":
/*!************************************************!*\
  !*** ./src/MIDIReader/MIDIEvents/Meta/Text.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TextEvent = /** @class */ (function () {
    function TextEvent(_a) {
        var text = _a.text;
        this.type = 2048 /* MetaText */;
        this.text = text;
    }
    return TextEvent;
}());
exports.TextEvent = TextEvent;


/***/ }),

/***/ "./src/MIDIReader/MIDIEvents/Meta/TimeSignature.ts":
/*!*********************************************************!*\
  !*** ./src/MIDIReader/MIDIEvents/Meta/TimeSignature.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TimeSignatureEvent = /** @class */ (function () {
    function TimeSignatureEvent(_a) {
        var numerator = _a.numerator, denominator = _a.denominator, clocksPerTick = _a.clocksPerTick, thirtySecondNotes = _a.thirtySecondNotes;
        this.type = 131072 /* MetaTimeSignature */;
        this.numerator = numerator;
        this.denominator = denominator;
        this.clocksPerTick = clocksPerTick;
        this.thirtySecondNotes = thirtySecondNotes;
    }
    return TimeSignatureEvent;
}());
exports.TimeSignatureEvent = TimeSignatureEvent;


/***/ }),

/***/ "./src/MIDIReader/MIDIEvents/Meta/TrackName.ts":
/*!*****************************************************!*\
  !*** ./src/MIDIReader/MIDIEvents/Meta/TrackName.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TrackNameEvent = /** @class */ (function () {
    function TrackNameEvent(_a) {
        var name = _a.name;
        this.type = 16384 /* MetaTrackName */;
        this.name = name;
    }
    return TrackNameEvent;
}());
exports.TrackNameEvent = TrackNameEvent;


/***/ }),

/***/ "./src/MIDIReader/MIDIEvents/Meta/index.ts":
/*!*************************************************!*\
  !*** ./src/MIDIReader/MIDIEvents/Meta/index.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __nested_webpack_require_101977__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SequenceNumber_1 = __nested_webpack_require_101977__(/*! ./SequenceNumber */ "./src/MIDIReader/MIDIEvents/Meta/SequenceNumber.ts");
exports.SequenceNumberEvent = SequenceNumber_1.SequenceNumberEvent;
var TimeSignature_1 = __nested_webpack_require_101977__(/*! ./TimeSignature */ "./src/MIDIReader/MIDIEvents/Meta/TimeSignature.ts");
exports.TimeSignatureEvent = TimeSignature_1.TimeSignatureEvent;
var KeySignature_1 = __nested_webpack_require_101977__(/*! ./KeySignature */ "./src/MIDIReader/MIDIEvents/Meta/KeySignature.ts");
exports.KeySignatureEvent = KeySignature_1.KeySignatureEvent;
var SetTempo_1 = __nested_webpack_require_101977__(/*! ./SetTempo */ "./src/MIDIReader/MIDIEvents/Meta/SetTempo.ts");
exports.SetTempoEvent = SetTempo_1.SetTempoEvent;
var PortPrefix_1 = __nested_webpack_require_101977__(/*! ./PortPrefix */ "./src/MIDIReader/MIDIEvents/Meta/PortPrefix.ts");
exports.PortPrefixEvent = PortPrefix_1.PortPrefixEvent;
var ChannelPrefix_1 = __nested_webpack_require_101977__(/*! ./ChannelPrefix */ "./src/MIDIReader/MIDIEvents/Meta/ChannelPrefix.ts");
exports.ChannelPrefixEvent = ChannelPrefix_1.ChannelPrefixEvent;
var Copyright_1 = __nested_webpack_require_101977__(/*! ./Copyright */ "./src/MIDIReader/MIDIEvents/Meta/Copyright.ts");
exports.CopyrightEvent = Copyright_1.CopyrightEvent;
var TrackName_1 = __nested_webpack_require_101977__(/*! ./TrackName */ "./src/MIDIReader/MIDIEvents/Meta/TrackName.ts");
exports.TrackNameEvent = TrackName_1.TrackNameEvent;
var Text_1 = __nested_webpack_require_101977__(/*! ./Text */ "./src/MIDIReader/MIDIEvents/Meta/Text.ts");
exports.TextEvent = Text_1.TextEvent;
var InstrumentName_1 = __nested_webpack_require_101977__(/*! ./InstrumentName */ "./src/MIDIReader/MIDIEvents/Meta/InstrumentName.ts");
exports.InstrumentNameEvent = InstrumentName_1.InstrumentNameEvent;
var Lyric_1 = __nested_webpack_require_101977__(/*! ./Lyric */ "./src/MIDIReader/MIDIEvents/Meta/Lyric.ts");
exports.LyricEvent = Lyric_1.LyricEvent;
var Marker_1 = __nested_webpack_require_101977__(/*! ./Marker */ "./src/MIDIReader/MIDIEvents/Meta/Marker.ts");
exports.MarkerEvent = Marker_1.MarkerEvent;
var CuePoint_1 = __nested_webpack_require_101977__(/*! ./CuePoint */ "./src/MIDIReader/MIDIEvents/Meta/CuePoint.ts");
exports.CuePointEvent = CuePoint_1.CuePointEvent;
var SMPTEOffset_1 = __nested_webpack_require_101977__(/*! ./SMPTEOffset */ "./src/MIDIReader/MIDIEvents/Meta/SMPTEOffset.ts");
exports.SMPTEOffsetEvent = SMPTEOffset_1.SMPTEOffsetEvent;
var SequencerSpecific_1 = __nested_webpack_require_101977__(/*! ./SequencerSpecific */ "./src/MIDIReader/MIDIEvents/Meta/SequencerSpecific.ts");
exports.SequencerSpecificEvent = SequencerSpecific_1.SequencerSpecificEvent;


/***/ }),

/***/ "./src/MIDIReader/MIDIEvents/NoteOff.ts":
/*!**********************************************!*\
  !*** ./src/MIDIReader/MIDIEvents/NoteOff.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var NoteOffEvent = /** @class */ (function () {
    function NoteOffEvent(_a) {
        var channel = _a.channel, noteNumber = _a.noteNumber, release = _a.release;
        this.type = 1 /* NoteOff */;
        this.channel = channel;
        this.noteNumber = noteNumber;
        this.release = release;
    }
    return NoteOffEvent;
}());
exports.NoteOffEvent = NoteOffEvent;


/***/ }),

/***/ "./src/MIDIReader/MIDIEvents/NoteOn.ts":
/*!*********************************************!*\
  !*** ./src/MIDIReader/MIDIEvents/NoteOn.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var NoteOnEvent = /** @class */ (function () {
    function NoteOnEvent(_a) {
        var channel = _a.channel, noteNumber = _a.noteNumber, velocity = _a.velocity;
        this.type = 2 /* NoteOn */;
        this.channel = channel;
        this.noteNumber = noteNumber;
        this.velocity = velocity;
    }
    return NoteOnEvent;
}());
exports.NoteOnEvent = NoteOnEvent;


/***/ }),

/***/ "./src/MIDIReader/MIDIEvents/PitchBend.ts":
/*!************************************************!*\
  !*** ./src/MIDIReader/MIDIEvents/PitchBend.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var PitchBendEvent = /** @class */ (function () {
    function PitchBendEvent(_a) {
        var channel = _a.channel, value = _a.value;
        this.type = 64 /* PitchBend */;
        this.channel = channel;
        this.value = value;
    }
    return PitchBendEvent;
}());
exports.PitchBendEvent = PitchBendEvent;


/***/ }),

/***/ "./src/MIDIReader/MIDIEvents/PolyphonicAftertouch.ts":
/*!***********************************************************!*\
  !*** ./src/MIDIReader/MIDIEvents/PolyphonicAftertouch.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var PolyphonicAftertouchEvent = /** @class */ (function () {
    function PolyphonicAftertouchEvent(_a) {
        var channel = _a.channel, noteNumber = _a.noteNumber, pressure = _a.pressure;
        this.type = 4 /* PolyphonicAftertouch */;
        this.channel = channel;
        this.noteNumber = noteNumber;
        this.pressure = pressure;
    }
    return PolyphonicAftertouchEvent;
}());
exports.PolyphonicAftertouchEvent = PolyphonicAftertouchEvent;


/***/ }),

/***/ "./src/MIDIReader/MIDIEvents/ProgramChange.ts":
/*!****************************************************!*\
  !*** ./src/MIDIReader/MIDIEvents/ProgramChange.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ProgramChangeEvent = /** @class */ (function () {
    function ProgramChangeEvent(_a) {
        var channel = _a.channel, programNumber = _a.programNumber;
        this.type = 16 /* ProgramChange */;
        this.channel = channel;
        this.programNumber = programNumber;
    }
    return ProgramChangeEvent;
}());
exports.ProgramChangeEvent = ProgramChangeEvent;


/***/ }),

/***/ "./src/MIDIReader/MIDIEvents/SysEx.ts":
/*!********************************************!*\
  !*** ./src/MIDIReader/MIDIEvents/SysEx.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SysExEvent = /** @class */ (function () {
    function SysExEvent(_a) {
        var eventData = _a.eventData;
        this.type = 128 /* Sysex */;
        this.eventData = eventData;
    }
    return SysExEvent;
}());
exports.SysExEvent = SysExEvent;


/***/ }),

/***/ "./src/MIDIReader/MIDIEvents/index.ts":
/*!********************************************!*\
  !*** ./src/MIDIReader/MIDIEvents/index.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __nested_webpack_require_109377__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var NoteOff_1 = __nested_webpack_require_109377__(/*! ./NoteOff */ "./src/MIDIReader/MIDIEvents/NoteOff.ts");
exports.NoteOffEvent = NoteOff_1.NoteOffEvent;
var NoteOn_1 = __nested_webpack_require_109377__(/*! ./NoteOn */ "./src/MIDIReader/MIDIEvents/NoteOn.ts");
exports.NoteOnEvent = NoteOn_1.NoteOnEvent;
var ProgramChange_1 = __nested_webpack_require_109377__(/*! ./ProgramChange */ "./src/MIDIReader/MIDIEvents/ProgramChange.ts");
exports.ProgramChangeEvent = ProgramChange_1.ProgramChangeEvent;
var ControllerChange_1 = __nested_webpack_require_109377__(/*! ./ControllerChange */ "./src/MIDIReader/MIDIEvents/ControllerChange.ts");
exports.ControllerChangeEvent = ControllerChange_1.ControllerChangeEvent;
var PolyphonicAftertouch_1 = __nested_webpack_require_109377__(/*! ./PolyphonicAftertouch */ "./src/MIDIReader/MIDIEvents/PolyphonicAftertouch.ts");
exports.PolyphonicAftertouchEvent = PolyphonicAftertouch_1.PolyphonicAftertouchEvent;
var ChannelAftertouch_1 = __nested_webpack_require_109377__(/*! ./ChannelAftertouch */ "./src/MIDIReader/MIDIEvents/ChannelAftertouch.ts");
exports.ChannelAftertouchEvent = ChannelAftertouch_1.ChannelAftertouchEvent;
var PitchBend_1 = __nested_webpack_require_109377__(/*! ./PitchBend */ "./src/MIDIReader/MIDIEvents/PitchBend.ts");
exports.PitchBendEvent = PitchBend_1.PitchBendEvent;
var SysEx_1 = __nested_webpack_require_109377__(/*! ./SysEx */ "./src/MIDIReader/MIDIEvents/SysEx.ts");
exports.SysExEvent = SysEx_1.SysExEvent;
var Meta_1 = __nested_webpack_require_109377__(/*! ./Meta */ "./src/MIDIReader/MIDIEvents/Meta/index.ts");
exports.Meta = {
    SequenceNumberEvent: Meta_1.SequenceNumberEvent,
    TimeSignatureEvent: Meta_1.TimeSignatureEvent,
    KeySignatureEvent: Meta_1.KeySignatureEvent,
    SetTempoEvent: Meta_1.SetTempoEvent,
    PortPrefixEvent: Meta_1.PortPrefixEvent,
    ChannelPrefixEvent: Meta_1.ChannelPrefixEvent,
    CopyrightEvent: Meta_1.CopyrightEvent,
    TrackNameEvent: Meta_1.TrackNameEvent,
    TextEvent: Meta_1.TextEvent,
    InstrumentNameEvent: Meta_1.InstrumentNameEvent,
    LyricEvent: Meta_1.LyricEvent,
    MarkerEvent: Meta_1.MarkerEvent,
    CuePointEvent: Meta_1.CuePointEvent,
    SMPTEOffsetEvent: Meta_1.SMPTEOffsetEvent,
    SequencerSpecificEvent: Meta_1.SequencerSpecificEvent,
};


/***/ }),

/***/ "./src/MIDIReader/MIDIFileType.ts":
/*!****************************************!*\
  !*** ./src/MIDIReader/MIDIFileType.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var MIDIFileType;
(function (MIDIFileType) {
    MIDIFileType[MIDIFileType["Format0"] = 0] = "Format0";
    MIDIFileType[MIDIFileType["Format1"] = 1] = "Format1";
    MIDIFileType[MIDIFileType["Format2"] = 2] = "Format2";
})(MIDIFileType = exports.MIDIFileType || (exports.MIDIFileType = {}));
;


/***/ }),

/***/ "./src/MIDIReader/MIDIMetaEventCreator.ts":
/*!************************************************!*\
  !*** ./src/MIDIReader/MIDIMetaEventCreator.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __nested_webpack_require_112581__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var MIDIEvents_1 = __nested_webpack_require_112581__(/*! ./MIDIEvents */ "./src/MIDIReader/MIDIEvents/index.ts");
var buffer_to_string_1 = __nested_webpack_require_112581__(/*! ../utils/buffer-to-string */ "./src/utils/buffer-to-string.ts");
var variable_length_value_1 = __nested_webpack_require_112581__(/*! ../utils/variable-length-value */ "./src/utils/variable-length-value.ts");
var readStringMetaEvent = function (dataView, startIndex) {
    var index = startIndex;
    var _a = variable_length_value_1.fromVariableLengthValue(dataView.buffer, dataView.byteOffset + index), bytesRead = _a[0], stringLength = _a[1];
    index += bytesRead;
    var str = buffer_to_string_1.bufferToString(dataView.buffer, dataView.byteOffset + index, stringLength);
    index = index + stringLength;
    return [
        bytesRead + stringLength,
        str
    ];
};
exports.createMetaEventFromBytes = function (statusByte, dataView, startIndex) {
    if (startIndex === void 0) { startIndex = 0; }
    var index = startIndex;
    var metaEventTypeNum = dataView.getUint8(index);
    index += 1;
    var event;
    if (metaEventTypeNum === 0x00) {
        // Next byte is 0x02--skip it
        index += 1;
        var sequenceNumber = dataView.getUint16(index);
        index += 2;
        event = new MIDIEvents_1.Meta.SequenceNumberEvent({
            sequenceNumber: sequenceNumber,
        });
    }
    else if (metaEventTypeNum === 0x01) {
        var _a = readStringMetaEvent(dataView, index), bytesRead = _a[0], text = _a[1];
        index += bytesRead;
        event = new MIDIEvents_1.Meta.TextEvent({
            text: text,
        });
    }
    else if (metaEventTypeNum === 0x02) {
        var _b = readStringMetaEvent(dataView, index), bytesRead = _b[0], copyright = _b[1];
        index += bytesRead;
        event = new MIDIEvents_1.Meta.CopyrightEvent({
            copyright: copyright,
        });
    }
    else if (metaEventTypeNum === 0x03) {
        var _c = readStringMetaEvent(dataView, index), bytesRead = _c[0], name_1 = _c[1];
        index += bytesRead;
        event = new MIDIEvents_1.Meta.TrackNameEvent({
            name: name_1,
        });
    }
    else if (metaEventTypeNum === 0x04) {
        var _d = readStringMetaEvent(dataView, index), bytesRead = _d[0], name_2 = _d[1];
        index += bytesRead;
        event = new MIDIEvents_1.Meta.InstrumentNameEvent({
            name: name_2,
        });
    }
    else if (metaEventTypeNum === 0x05) {
        var _e = readStringMetaEvent(dataView, index), bytesRead = _e[0], lyric = _e[1];
        index += bytesRead;
        event = new MIDIEvents_1.Meta.LyricEvent({
            lyric: lyric,
        });
    }
    else if (metaEventTypeNum === 0x06) {
        var _f = readStringMetaEvent(dataView, index), bytesRead = _f[0], marker = _f[1];
        index += bytesRead;
        event = new MIDIEvents_1.Meta.MarkerEvent({
            marker: marker,
        });
    }
    else if (metaEventTypeNum === 0x07) {
        var _g = readStringMetaEvent(dataView, index), bytesRead = _g[0], cueText = _g[1];
        index += bytesRead;
        event = new MIDIEvents_1.Meta.CuePointEvent({
            cueText: cueText,
        });
    }
    else if (metaEventTypeNum === 0x20) {
        // Skip next byte since it is a constant
        index += 1;
        var channelNumber = dataView.getUint8(index);
        index += 1;
        event = new MIDIEvents_1.Meta.ChannelPrefixEvent({
            channelNumber: channelNumber,
        });
    }
    else if (metaEventTypeNum === 0x21) {
        // Skip next byte since it is a constant
        index += 1;
        var portNumber = dataView.getUint8(index);
        index += 1;
        event = new MIDIEvents_1.Meta.PortPrefixEvent({
            portNumber: portNumber,
        });
    }
    else if (metaEventTypeNum === 0x2F) {
        // End of track event
        index += 1;
    }
    else if (metaEventTypeNum === 0x51) {
        // Next byte is 0x03--skip it
        index += 1;
        var microsecondsPerQuarterNote = (dataView.getUint8(index) << 16) +
            (dataView.getUint8(index + 1) << 8) + dataView.getUint8(index + 2);
        index += 3;
        event = new MIDIEvents_1.Meta.SetTempoEvent({
            microsecondsPerQuarterNote: microsecondsPerQuarterNote,
        });
    }
    else if (metaEventTypeNum === 0x54) {
        // Skip next byte because it's a constant
        index += 1;
        var hours = dataView.getUint8(index);
        index += 1;
        var minutes = dataView.getUint8(index);
        index += 1;
        var seconds = dataView.getUint8(index);
        index += 1;
        var frames_1 = dataView.getUint8(index);
        index += 1;
        var fractionalFrames = dataView.getUint8(index);
        index += 1;
        event = new MIDIEvents_1.Meta.SMPTEOffsetEvent({
            hours: hours,
            minutes: minutes,
            seconds: seconds,
            frames: frames_1,
            fractionalFrames: fractionalFrames,
        });
    }
    else if (metaEventTypeNum === 0x58) {
        // Next byte is 0x04--skip it
        index += 1;
        var numerator = dataView.getUint8(index);
        index += 1;
        var denominator = Math.pow(2, dataView.getUint8(index));
        index += 1;
        var clocksPerTick = dataView.getUint8(index);
        index += 1;
        var thirtySecondNotes = dataView.getUint8(index);
        index += 1;
        event = new MIDIEvents_1.Meta.TimeSignatureEvent({
            numerator: numerator,
            denominator: denominator,
            clocksPerTick: clocksPerTick,
            thirtySecondNotes: thirtySecondNotes,
        });
    }
    else if (metaEventTypeNum === 0x59) {
        // Next byte is 0x02--skip it
        index += 1;
        var sharps = dataView.getInt8(index);
        index += 1;
        var isMajor = dataView.getUint8(index) === 0;
        index += 1;
        event = new MIDIEvents_1.Meta.KeySignatureEvent({
            sharps: sharps,
            isMajor: isMajor,
        });
    }
    else if (metaEventTypeNum === 0x7F) {
        var _h = variable_length_value_1.fromVariableLengthValue(dataView.buffer, dataView.byteOffset + index), bytesRead = _h[0], length_1 = _h[1];
        index += bytesRead;
        var data = new Uint8Array(dataView.buffer, dataView.byteOffset + index, length_1);
        var id = data.slice(0, 1);
        if (id[0] === 0) {
            id = data.slice(0, 3);
            data = data.slice(3);
        }
        else {
            data = data.slice(1);
        }
        event = new MIDIEvents_1.Meta.SequencerSpecificEvent({
            id: id,
            data: data,
        });
    }
    else {
        throw new Error("Unknown MIDI meta event type 0x" + metaEventTypeNum.toString(16));
    }
    return [
        index - startIndex,
        event,
    ];
};


/***/ }),

/***/ "./src/MIDIReader/MIDIParseError.ts":
/*!******************************************!*\
  !*** ./src/MIDIReader/MIDIParseError.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var MIDIParseError = /** @class */ (function (_super) {
    __extends(MIDIParseError, _super);
    function MIDIParseError(message) {
        return _super.call(this, "Invalid MIDI file: " + message) || this;
    }
    return MIDIParseError;
}(Error));
exports.MIDIParseError = MIDIParseError;


/***/ }),

/***/ "./src/MIDIReader/index.ts":
/*!*********************************!*\
  !*** ./src/MIDIReader/index.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __nested_webpack_require_120969__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var MIDIEvents_1 = __nested_webpack_require_120969__(/*! ./MIDIEvents */ "./src/MIDIReader/MIDIEvents/index.ts");
exports.MIDIEvents = {
    NoteOffEvent: MIDIEvents_1.NoteOffEvent,
    NoteOnEvent: MIDIEvents_1.NoteOnEvent,
    ProgramChangeEvent: MIDIEvents_1.ProgramChangeEvent,
    ControllerChangeEvent: MIDIEvents_1.ControllerChangeEvent,
    PolyphonicAftertouchEvent: MIDIEvents_1.PolyphonicAftertouchEvent,
    ChannelAftertouchEvent: MIDIEvents_1.ChannelAftertouchEvent,
    PitchBendEvent: MIDIEvents_1.PitchBendEvent,
    SysExEvent: MIDIEvents_1.SysExEvent,
    Meta: MIDIEvents_1.Meta,
};
var MIDIFileType_1 = __nested_webpack_require_120969__(/*! ./MIDIFileType */ "./src/MIDIReader/MIDIFileType.ts");
exports.MIDIFileType = MIDIFileType_1.MIDIFileType;
var MIDIParseError_1 = __nested_webpack_require_120969__(/*! ./MIDIParseError */ "./src/MIDIReader/MIDIParseError.ts");
exports.MIDIParseError = MIDIParseError_1.MIDIParseError;
var midi_reader_1 = __nested_webpack_require_120969__(/*! ./midi-reader */ "./src/MIDIReader/midi-reader.ts");
exports.MIDIReader = midi_reader_1.MIDIReader;


/***/ }),

/***/ "./src/MIDIReader/midi-reader.ts":
/*!***************************************!*\
  !*** ./src/MIDIReader/midi-reader.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __nested_webpack_require_122372__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var MIDIFileType_1 = __nested_webpack_require_122372__(/*! ./MIDIFileType */ "./src/MIDIReader/MIDIFileType.ts");
var MIDIParseError_1 = __nested_webpack_require_122372__(/*! ./MIDIParseError */ "./src/MIDIReader/MIDIParseError.ts");
var MIDIEventCreator_1 = __nested_webpack_require_122372__(/*! ./MIDIEventCreator */ "./src/MIDIReader/MIDIEventCreator.ts");
var variable_length_value_1 = __nested_webpack_require_122372__(/*! ../utils/variable-length-value */ "./src/utils/variable-length-value.ts");
var buffer_to_string_1 = __nested_webpack_require_122372__(/*! ../utils/buffer-to-string */ "./src/utils/buffer-to-string.ts");
var MIDIReader = /** @class */ (function () {
    function MIDIReader(buffer) {
        if (buffer instanceof DataView) {
            this.bufferOffset = buffer.byteOffset;
            this.bufferLength = buffer.byteLength;
            this.buffer = buffer.buffer;
            this.dataView = buffer;
        }
        else if (buffer instanceof Buffer) {
            this.bufferOffset = buffer.byteOffset;
            this.bufferLength = buffer.byteLength;
            this.buffer = buffer.buffer;
            this.dataView = new DataView(this.buffer, this.bufferOffset, this.bufferLength);
        }
        else {
            this.bufferOffset = 0;
            this.bufferLength = buffer.byteLength;
            this.buffer = buffer;
            this.dataView = new DataView(this.buffer, this.bufferOffset, this.bufferLength);
        }
        var fileHeaderChunk = this.readString(0, 4);
        if (fileHeaderChunk !== 'MThd') {
            throw new MIDIParseError_1.MIDIParseError('File does not start with a header chunk');
        }
        var _a = this.readFileHeader(4), trackStartOffset = _a[0], header = _a[1];
        this.trackStartOffset = trackStartOffset + 4;
        this.header = header;
    }
    MIDIReader.prototype.readUint32 = function (startIndex) {
        return this.dataView.getUint32(startIndex);
    };
    MIDIReader.prototype.readUint16 = function (startIndex) {
        return this.dataView.getUint16(startIndex);
    };
    MIDIReader.prototype.readString = function (startIndex, length) {
        return buffer_to_string_1.bufferToString(this.buffer, this.bufferOffset + startIndex, length);
    };
    MIDIReader.prototype.readVariableLength = function (startIndex) {
        return variable_length_value_1.fromVariableLengthValue(this.buffer, this.bufferOffset + startIndex);
    };
    MIDIReader.prototype.readMIDIEvent = function (startIndex, trackNumber, previousStatusByte) {
        var _a = this.readVariableLength(startIndex), bytesRead = _a[0], deltaTime = _a[1];
        var index = startIndex + bytesRead;
        var eventOrNull = MIDIEventCreator_1.eventFromBytes(this.dataView, index, previousStatusByte);
        if (eventOrNull === null) {
            var statusByte_1 = this.dataView.getUint8(index);
            throw new MIDIParseError_1.MIDIParseError("Unknown MIDI event status 0x" + statusByte_1.toString(16).toUpperCase());
        }
        var eventBytesRead = eventOrNull.bytesRead, event = eventOrNull.event, statusByte = eventOrNull.statusByte;
        return {
            bytesRead: index + eventBytesRead - startIndex,
            eventData: {
                trackNumber: trackNumber,
                deltaTime: deltaTime,
                event: event,
            },
            statusByte: statusByte,
        };
    };
    MIDIReader.prototype.readFileHeader = function (startIndex) {
        var length = this.dataView.getUint32(startIndex);
        // Add 4 bytes for the length field
        var index = startIndex + 4;
        var fileTypeNumber = this.dataView.getUint16(index);
        index += 2;
        var fileType;
        if (fileTypeNumber === 0) {
            fileType = MIDIFileType_1.MIDIFileType.Format0;
        }
        else if (fileTypeNumber === 1) {
            fileType = MIDIFileType_1.MIDIFileType.Format1;
        }
        else if (fileTypeNumber === 2) {
            fileType = MIDIFileType_1.MIDIFileType.Format2;
        }
        else {
            throw new MIDIParseError_1.MIDIParseError("Unknown MIDI file type: " + fileTypeNumber);
        }
        var trackCount = this.dataView.getUint16(index);
        index += 2;
        var divisionNum = this.dataView.getUint16(index);
        index += 2;
        var division;
        // high bit set = SMPTE
        if (divisionNum >> 15 === 1) {
            var deltaTimePerFrame = divisionNum & 0xF;
            var negativeFramesPerSecond = (divisionNum >> 8) & 0x7f;
            division = {
                deltaTimePerFrame: deltaTimePerFrame,
                negativeFramesPerSecond: negativeFramesPerSecond,
            };
        }
        else {
            division = {
                ticks: divisionNum & 0x7FFF,
            };
        }
        return [
            // Add 4 for the length header
            4 + length,
            {
                fileType: fileType,
                trackCount: trackCount,
                division: division,
            }
        ];
    };
    MIDIReader.prototype.readTracks = function (_a) {
        var index, inHeader, inTrack, trackNumber, currentTrackEndIndex, previousStatusByte, chunkType, length_1, _b, bytesRead, eventData, statusByte;
        var _c = (_a === void 0 ? {} : _a).eventTypes, eventTypes = _c === void 0 ? 8388607 /* All */ : _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    index = this.trackStartOffset;
                    inHeader = false;
                    inTrack = false;
                    trackNumber = 0;
                    currentTrackEndIndex = null;
                    _d.label = 1;
                case 1:
                    if (!(index < this.bufferLength)) return [3 /*break*/, 5];
                    if (!(currentTrackEndIndex === null)) return [3 /*break*/, 2];
                    chunkType = this.readString(index, 4);
                    index += 4;
                    if (chunkType !== 'MTrk') {
                        throw new MIDIParseError_1.MIDIParseError('No track header found at start of track');
                    }
                    length_1 = this.readUint32(index);
                    index += 4;
                    currentTrackEndIndex = index + length_1;
                    trackNumber = trackNumber + 1;
                    return [3 /*break*/, 4];
                case 2:
                    _b = this.readMIDIEvent(index, trackNumber, previousStatusByte), bytesRead = _b.bytesRead, eventData = _b.eventData, statusByte = _b.statusByte;
                    index += bytesRead;
                    previousStatusByte = statusByte;
                    if (index === currentTrackEndIndex) {
                        currentTrackEndIndex = null;
                    }
                    if (!(eventData.event && (eventData.event.type & eventTypes))) return [3 /*break*/, 4];
                    return [4 /*yield*/, eventData];
                case 3:
                    _d.sent();
                    _d.label = 4;
                case 4: return [3 /*break*/, 1];
                case 5: return [2 /*return*/];
            }
        });
    };
    return MIDIReader;
}());
exports.MIDIReader = MIDIReader;

/* WEBPACK VAR INJECTION */}.call(this, __nested_webpack_require_122372__(/*! ./../../node_modules/buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./src/MIDIWriter/MIDIFile.ts":
/*!************************************!*\
  !*** ./src/MIDIWriter/MIDIFile.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __nested_webpack_require_131930__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var debug_1 = __importDefault(__nested_webpack_require_131930__(/*! debug */ "./node_modules/debug/src/browser.js"));
var utils_1 = __nested_webpack_require_131930__(/*! ../utils */ "./src/utils/index.ts");
var debug = debug_1.default("midi-tools:MIDIFile");
var stringToCharCodeArray = function (str) {
    return new Uint8Array(str.split("").map(function (chr) { return chr.charCodeAt(0); }));
};
var mthdString = stringToCharCodeArray("MThd");
var mtrkString = stringToCharCodeArray("MTrk");
var END_OF_TRACK_EVENT = new Uint8Array([0xFF, 0x2F, 0x00]);
var numberToBytes = function (num, minBytes) {
    var bytes = [];
    do {
        bytes.unshift(num & 0xFF);
        num = num >> 8;
    } while (num > 0 || bytes.length < minBytes);
    return new Uint8Array(bytes);
};
var getNoteOnEvent = function (note, channel, velocity) {
    return new Uint8Array([
        144 /* NoteOn */ + (channel - 1),
        // Unset top bit; value can only be 7 bits long
        note & 0x7F,
        velocity & 0x7F,
    ]);
};
var getNoteOffEvent = function (note, channel, velocity) {
    return new Uint8Array([
        128 /* NoteOff */ + (channel - 1),
        // Unset top bit; value can only be 7 bits long
        note & 0x7F,
        velocity & 0x7F,
    ]);
};
var getProgramChangeEvent = function (_a) {
    var channel = _a.channel, program = _a.program;
    return new Uint8Array([
        192 /* ProgramChange */ + (channel - 1),
        program
    ]);
};
var getFileHeader = function (_a) {
    var divisions = _a.divisions, trackCount = _a.trackCount;
    var format = trackCount === 1 ?
        0 :
        1;
    // # of divisions per quarter note (15 bits only)
    var divisionsBytes = numberToBytes(divisions & 0x7FFF, 2);
    var trackCountBytes = numberToBytes(trackCount, 2);
    var totalLength = mthdString.byteLength +
        // 4 bytes for length field  
        4 +
        // 2 bytes for format field
        2 +
        trackCountBytes.byteLength +
        divisionsBytes.byteLength;
    var header = new Uint8Array(totalLength);
    var index = 0;
    header.set(mthdString, index);
    index += mthdString.byteLength;
    // Length field, MSB first
    header.set(Uint8Array.of(0, 0, 0, 6), index);
    index += 4;
    header.set(Uint8Array.of(0, format), index);
    index += 2;
    header.set(trackCountBytes, index);
    index += trackCountBytes.byteLength;
    header.set(divisionsBytes, index);
    index += divisionsBytes.byteLength;
    return header;
};
var getTrackHeader = function (_a) {
    var length = _a.length;
    // 4 for the MTrk header, 4 for the length buffer
    var buff = new ArrayBuffer(8);
    new Uint8Array(buff).set(mtrkString, 0);
    new DataView(buff).setUint32(4, length);
    return new Uint8Array(buff);
};
var MIDIFile = /** @class */ (function () {
    function MIDIFile(_a) {
        var divisions = _a.divisions;
        this.buffers = [];
        this.tracks = {};
        this.omniTrackEvents = [];
        this.divisions = divisions;
    }
    MIDIFile.prototype.programChange = function (_a) {
        var offset = _a.offset, program = _a.program, track = _a.track, _b = _a.channel, channel = _b === void 0 ? 1 : _b;
        var programChangeEvent = getProgramChangeEvent({ channel: channel, program: program });
        var bufferInfo = {
            event: programChangeEvent,
            eventType: 192 /* ProgramChange */,
            divisionOffset: offset,
        };
        if (track === undefined) {
            this.omniTrackEvents.push(bufferInfo);
        }
        else {
            if (!(track in this.tracks)) {
                this.tracks[track] = {
                    buffers: [],
                };
            }
            this.tracks[track].buffers.push(bufferInfo);
        }
    };
    MIDIFile.prototype.timeSignature = function (_a) {
        var numerator = _a.numerator, denominator = _a.denominator;
        var event = new Uint8Array([
            255 /* Meta */,
            88 /* TimeSignature */,
            4,
            numerator,
            Math.log2(denominator),
            // @todo: figure out how to actually deal with these parameters
            // robustly--I don't really understand them entirely
            // Number of metronome ticks per quarter note
            24,
            // Number of 1/32nd notes per MIDI quarter note
            8,
        ]);
        this.omniTrackEvents.push({
            event: event,
            eventType: 255 /* Meta */,
            divisionOffset: 0,
        });
    };
    MIDIFile.prototype.keySignature = function (_a) {
        var keySignature = _a.keySignature, _b = _a.offset, offset = _b === void 0 ? 0 : _b;
        var event = new Uint8Array([
            255 /* Meta */,
            89 /* KeySignature */,
            2,
            keySignature.sharps,
            // major (0) vs. minor (1)
            // @todo: Actually find major/minor key from XML
            keySignature.mode === "minor" ? 1 : 0,
        ]);
        this.omniTrackEvents.push({
            event: event,
            eventType: 255 /* Meta */,
            divisionOffset: offset,
        });
    };
    MIDIFile.prototype.setTitle = function (title) {
        // add 1 for null terminator byte
        var length = utils_1.toVariableLengthValue(title.length + 1);
        var chars = stringToCharCodeArray(title + "\0");
        var totalLength = 2 + // 1 byte each for status and subtype
            length.byteLength +
            chars.byteLength;
        var event = new Uint8Array(totalLength);
        var index = 0;
        event.set(Uint8Array.of(255 /* Meta */, 3 /* TrackName */), index);
        index += 2;
        event.set(length, index);
        index += length.byteLength;
        event.set(chars, index);
        index += chars.byteLength;
        this.buffers.push({
            event: event,
            eventType: 255 /* Meta */,
            divisionOffset: 0,
        });
    };
    MIDIFile.prototype.note = function (_a) {
        var note = _a.note, duration = _a.duration, offset = _a.offset, track = _a.track, _b = _a.channel, channel = _b === void 0 ? 1 : _b, _c = _a.velocity, velocity = _c === void 0 ? 64 : _c, _d = _a.release, release = _d === void 0 ? velocity : _d, _e = _a.meta, meta = _e === void 0 ? {} : _e;
        var noteOnEvent = getNoteOnEvent(note, channel, velocity);
        var noteName = utils_1.NoteNumberToName(note);
        noteName = "" + noteName.step + (noteName.alter === 1 ?
            '#' :
            noteName.alter === -1 ?
                'b' :
                '') + noteName.octave;
        if (!(track in this.tracks)) {
            this.tracks[track] = {
                buffers: [],
            };
        }
        this.tracks[track].buffers.push({
            event: noteOnEvent,
            eventType: 144 /* NoteOn */,
            divisionOffset: offset,
            meta: __assign({ name: noteName }, meta),
        });
        debug('note on: ', {
            note: note,
            offset: offset,
            duration: duration,
            channel: channel,
            velocity: velocity,
            event: noteOnEvent,
        });
        var noteOffEvent = getNoteOffEvent(note, channel, release);
        var noteOffOffset = offset + duration;
        debug('note off: ', {
            note: note,
            offset: noteOffOffset,
            channel: channel,
            release: release,
            meta: __assign({ name: noteName }, meta),
        });
        this.tracks[track].buffers.push({
            event: noteOffEvent,
            eventType: 128 /* NoteOff */,
            divisionOffset: noteOffOffset,
        });
    };
    MIDIFile.prototype.setTempo = function (tempo) {
        var microsecondsPerQuarterNote = 6e7 / tempo;
        var tempoBytes = numberToBytes(microsecondsPerQuarterNote, 3);
        // 1 byte each for status type and meta type, and 1 for constant value 0x03 after meta type
        var totalLength = 3 +
            tempoBytes.byteLength;
        var event = new Uint8Array(totalLength);
        var index = 0;
        event.set(Uint8Array.of(255 /* Meta */, 81 /* SetTempo */, 3), index);
        index += 3;
        event.set(tempoBytes, index);
        index += tempoBytes.byteLength;
        this.omniTrackEvents.push({
            event: event,
            eventType: 255 /* Meta */,
            divisionOffset: 0,
        });
    };
    MIDIFile.prototype.sortBuffers = function () {
        var _this = this;
        return Object.keys(this.tracks).reduce(function (reduction, trackNumber) {
            // shallow clone to avoid adding omniTrackEvents to the actual tracks
            var trackBuffers = _this.tracks[trackNumber].buffers.slice();
            trackBuffers.unshift.apply(trackBuffers, _this.omniTrackEvents);
            reduction[trackNumber] = trackBuffers.sort(function (a, b) {
                var offsetDiff = a.divisionOffset - b.divisionOffset;
                if (offsetDiff === 0) {
                    if (a.eventType === b.eventType) {
                        return 0;
                    }
                    if (a.eventType === 192 /* ProgramChange */ ||
                        a.eventType === 255 /* Meta */) {
                        if (b.eventType === 192 /* ProgramChange */ ||
                            b.eventType === 255 /* Meta */) {
                            return 0;
                        }
                        return -1;
                    }
                    return 1;
                }
                return offsetDiff;
            });
            return reduction;
        }, {});
    };
    MIDIFile.prototype.toArrayBuffer = function () {
        var buffers = this.sortBuffers();
        var trackCount = Object.keys(this.tracks).length;
        var trackLengths = Object.keys(buffers).reduce(function (totals, trackNumber) {
            var prevDuration = 0;
            totals[trackNumber] = buffers[trackNumber].reduce(function (total, midiEventInfo) {
                total = total + midiEventInfo.event.length;
                var deltaTime = midiEventInfo.divisionOffset - prevDuration;
                var deltaTimeBuffer = utils_1.toVariableLengthValue(deltaTime);
                total += deltaTimeBuffer.length;
                midiEventInfo.deltaTimeBuffer = deltaTimeBuffer;
                prevDuration = midiEventInfo.divisionOffset;
                return total;
            }, 0);
            totals[trackNumber] += 1 + // The delta time offset for end of track is 0, which takes 1 byte in VLV
                END_OF_TRACK_EVENT.length;
            return totals;
        }, {});
        var headerChunk = getFileHeader({
            divisions: this.divisions,
            trackCount: trackCount,
        });
        var trackHeaders = Object.keys(buffers).reduce(function (headers, trackNumber) {
            headers[trackNumber] = getTrackHeader({
                length: trackLengths[trackNumber],
            });
            return headers;
        }, {});
        var totalLength = headerChunk.length;
        totalLength += Object.keys(trackHeaders).reduce(function (total, trackNumber) { return total + trackHeaders[trackNumber].length; }, 0);
        totalLength += Object.keys(buffers).reduce(function (total, trackNumber) { return total + trackLengths[trackNumber]; }, 0);
        var buff = new ArrayBuffer(totalLength);
        var arr = new Uint8Array(buff);
        var offset = 0;
        arr.set(headerChunk, offset);
        offset += headerChunk.length;
        Object.keys(buffers).forEach(function (trackNumber) {
            arr.set(trackHeaders[trackNumber], offset);
            offset += trackHeaders[trackNumber].length;
            buffers[trackNumber].forEach(function (midiEventInfo) {
                var deltaTimeBuffer = midiEventInfo.deltaTimeBuffer;
                arr.set(deltaTimeBuffer, offset);
                offset += deltaTimeBuffer.length;
                arr.set(midiEventInfo.event, offset);
                offset += midiEventInfo.event.length;
            });
            // Delta time for end of track event is 0, so the buffer for it is always
            // the same
            arr.set(Uint8Array.from([0]), offset);
            offset += 1;
            arr.set(END_OF_TRACK_EVENT, offset);
            offset += END_OF_TRACK_EVENT.length;
        });
        return buff;
    };
    return MIDIFile;
}());
exports.MIDIFile = MIDIFile;


/***/ }),

/***/ "./src/MIDIWriter/index.ts":
/*!*********************************!*\
  !*** ./src/MIDIWriter/index.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __nested_webpack_require_145194__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var MIDIFile_1 = __nested_webpack_require_145194__(/*! ./MIDIFile */ "./src/MIDIWriter/MIDIFile.ts");
exports.MIDIFile = MIDIFile_1.MIDIFile;


/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __nested_webpack_require_145608__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var MIDIWriter_1 = __nested_webpack_require_145608__(/*! ./MIDIWriter */ "./src/MIDIWriter/index.ts");
exports.MIDIFile = MIDIWriter_1.MIDIFile;
var MIDIReader_1 = __nested_webpack_require_145608__(/*! ./MIDIReader */ "./src/MIDIReader/index.ts");
exports.MIDIEvents = MIDIReader_1.MIDIEvents;
exports.MIDIFileType = MIDIReader_1.MIDIFileType;
exports.MIDIParseError = MIDIReader_1.MIDIParseError;
exports.MIDIReader = MIDIReader_1.MIDIReader;
var utils_1 = __nested_webpack_require_145608__(/*! ./utils */ "./src/utils/index.ts");
exports.bufferToString = utils_1.bufferToString;
exports.fromVariableLengthValue = utils_1.fromVariableLengthValue;
exports.toVariableLengthValue = utils_1.toVariableLengthValue;
exports.NoteNameToNumber = utils_1.NoteNameToNumber;
exports.NoteNumberToName = utils_1.NoteNumberToName;


/***/ }),

/***/ "./src/utils/buffer-to-string.ts":
/*!***************************************!*\
  !*** ./src/utils/buffer-to-string.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.bufferToString = function (buffer, startIndex, length) {
    var str = '';
    var dataView = new DataView(buffer, startIndex, length);
    for (var i = 0; i < length; i++) {
        str += String.fromCharCode(dataView.getUint8(i));
    }
    return str;
};


/***/ }),

/***/ "./src/utils/index.ts":
/*!****************************!*\
  !*** ./src/utils/index.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __nested_webpack_require_147313__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var buffer_to_string_1 = __nested_webpack_require_147313__(/*! ./buffer-to-string */ "./src/utils/buffer-to-string.ts");
exports.bufferToString = buffer_to_string_1.bufferToString;
var variable_length_value_1 = __nested_webpack_require_147313__(/*! ./variable-length-value */ "./src/utils/variable-length-value.ts");
exports.fromVariableLengthValue = variable_length_value_1.fromVariableLengthValue;
exports.toVariableLengthValue = variable_length_value_1.toVariableLengthValue;
var midi_note_converter_1 = __nested_webpack_require_147313__(/*! ./midi-note-converter */ "./src/utils/midi-note-converter.ts");
exports.NoteNameToNumber = midi_note_converter_1.NoteNameToNumber;
exports.NoteNumberToName = midi_note_converter_1.NoteNumberToName;


/***/ }),

/***/ "./src/utils/midi-note-converter.ts":
/*!******************************************!*\
  !*** ./src/utils/midi-note-converter.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function NoteNumberToName(note) {
    var step;
    var alter;
    // eslint-disable-next-line no-magic-numbers
    var octave = Math.floor(note / 12) - 1;
    /* eslint-disable no-fallthrough */
    /* eslint-disable no-magic-numbers */
    switch (note % 12) {
        case 1:
            alter = 1;
        case 0:
            step = "C";
            break;
        case 3:
            alter = 1;
        case 2:
            step = "D";
            break;
        case 4:
            step = "E";
            break;
        case 6:
            alter = 1;
        case 5:
            step = "F";
            break;
        case 8:
            alter = 1;
        case 7:
            step = "G";
            break;
        case 10:
            alter = 1;
        case 9:
            step = "A";
            break;
        case 11:
            step = "B";
            break;
    }
    /* eslint-enable no-magic-numbers */
    /* eslint-enable no-fallthrough */
    var noteObj = {
        step: step,
        octave: octave,
        MIDINumber: note,
    };
    if (alter) {
        noteObj.alter = alter;
    }
    return noteObj;
}
exports.NoteNumberToName = NoteNumberToName;
var stepToNumber = {
    C: 0,
    D: 2,
    E: 4,
    F: 5,
    G: 7,
    A: 9,
    B: 11,
};
var steps = "ABCDEFG";
function NoteNameToNumber(noteName) {
    var step;
    var octave;
    var alter;
    if (typeof noteName === "string") {
        var matches = /^([A-G])([#b])?(-?\d+)$/.exec(noteName);
        if (!matches) {
            return null;
        }
        var alterString = matches[2];
        step = matches[1];
        octave = Number(matches[3]);
        if (alterString === "b") {
            alter = -1;
        }
        else if (alterString === "#") {
            alter = 1;
        }
    }
    else {
        step = noteName.step;
        alter = noteName.alter;
        octave = noteName.octave;
    }
    if (alter === -1) {
        alter = 1;
        var initialStepIndex = steps.indexOf(step);
        step = steps[(steps.indexOf(step) + steps.length - 1) % steps.length];
        // e.g. going from Ab4 -> G#3
        if (steps.indexOf(step) > initialStepIndex) {
            octave -= 1;
        }
    }
    var number = stepToNumber[step];
    if (alter === 1) {
        number += 1;
    }
    // eslint-disable-next-line no-magic-numbers
    return number + ((octave + 1) * 12);
}
exports.NoteNameToNumber = NoteNameToNumber;


/***/ }),

/***/ "./src/utils/variable-length-value.ts":
/*!********************************************!*\
  !*** ./src/utils/variable-length-value.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function toVariableLengthValue(num) {
    var bytes = [];
    do {
        var byte = num & 0x7F;
        num = num >> 7;
        if (bytes.length > 0) {
            byte = byte + 0x80;
        }
        bytes.unshift(byte);
    } while (num > 0);
    return new Uint8Array(bytes);
}
exports.toVariableLengthValue = toVariableLengthValue;
;
function fromVariableLengthValue(buffer, startIndex) {
    if (startIndex === void 0) { startIndex = 0; }
    var uArray = new Uint8Array(buffer, startIndex);
    var value = 0;
    var index = -1;
    var bytesRead = 0;
    do {
        index += 1;
        value = (value << 7) + (uArray[index] & 0x7F);
        bytesRead += 1;
    } while (uArray[index] & 0x80);
    return [bytesRead, value];
}
exports.fromVariableLengthValue = fromVariableLengthValue;
;


/***/ })

/******/ });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "./node_modules/jasmid.ts/lib/BufferReader.js":
/*!****************************************************!*\
  !*** ./node_modules/jasmid.ts/lib/BufferReader.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.BufferReader = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var BufferReader =
/*#__PURE__*/
function () {
  function BufferReader(buffer) {
    _classCallCheck(this, BufferReader);

    this.position = 0;
    this.data = new DataView(buffer);
  }

  _createClass(BufferReader, [{
    key: "read",
    value: function read(length) {
      var value = this.data.buffer.slice(this.position, this.position + length);
      this.position += length;
      return value;
    }
  }, {
    key: "int8",
    value: function int8() {
      var value = this.data.getInt8(this.position);
      this.position += 1;
      return value;
    }
  }, {
    key: "uint8",
    value: function uint8() {
      var value = this.data.getUint8(this.position);
      this.position += 1;
      return value;
    }
  }, {
    key: "uint16",
    value: function uint16() {
      var value = this.data.getUint16(this.position);
      this.position += 2;
      return value;
    }
  }, {
    key: "uint32",
    value: function uint32() {
      var value = this.data.getUint32(this.position);
      this.position += 4;
      return value;
    }
  }, {
    key: "string",
    value: function string(length) {
      return new TextDecoder("ascii").decode(this.read(length));
    }
  }, {
    key: "eof",
    value: function eof() {
      return this.position >= this.data.byteLength;
    }
    /**
     * Read a MIDI-style variable-length integer.
     * (big-endian value in groups of 7 bits, with top bit set to signify that another byte follows)
     */

  }, {
    key: "midiInt",
    value: function midiInt() {
      var result = 0;

      while (true) {
        var value = this.uint8();

        if (value & 128) {
          result += value & 127;
          result <<= 7;
        } else {
          return result + value;
        }
      }
    }
  }, {
    key: "midiChunk",
    value: function midiChunk() {
      var id = this.string(4);
      var length = this.uint32();
      var data = this.read(length);
      return {
        id: id,
        length: length,
        data: data
      };
    }
  }]);

  return BufferReader;
}();

exports.BufferReader = BufferReader;

/***/ }),

/***/ "./node_modules/jasmid.ts/lib/index.js":
/*!*********************************************!*\
  !*** ./node_modules/jasmid.ts/lib/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.parseMidiFile = parseMidiFile;

var _BufferReader = __webpack_require__(/*! ./BufferReader */ "./node_modules/jasmid.ts/lib/BufferReader.js");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function parseMidiFile(buffer) {
  var reader = new _BufferReader.BufferReader(buffer);
  var header = parseHeader(reader);
  var tracks = parseTracks(reader);
  return {
    header: header,
    tracks: tracks
  };
}

function parseHeader(reader) {
  var headerChunk = reader.midiChunk();

  if (headerChunk.id !== "MThd" || headerChunk.length !== 6) {
    throw "Bad .mid file, header not found";
  }

  var headerReader = new _BufferReader.BufferReader(headerChunk.data);
  var formatType = headerReader.uint16();
  var trackCount = headerReader.uint16();
  var timeDivision = headerReader.uint16();

  if (timeDivision & 0x8000) {
    throw "Expressing time division in SMTPE frames is not supported yet";
  }

  var ticksPerBeat = timeDivision;
  return {
    formatType: formatType,
    trackCount: trackCount,
    ticksPerBeat: ticksPerBeat
  };
}

function parseTracks(reader) {
  var tracks = [];

  while (!reader.eof()) {
    var trackChunk = reader.midiChunk();

    if (trackChunk.id !== "MTrk") {
      throw "Unexpected chunk, expected MTrk, got " + trackChunk.id;
    }

    var trackTrack = new _BufferReader.BufferReader(trackChunk.data);
    var track = [];

    while (!trackTrack.eof()) {
      var lastEvent = track[track.length - 1];
      var event = parseEvent(trackTrack, lastEvent ? lastEvent.typeByte : undefined);
      track = _toConsumableArray(track).concat([event]);
    }

    tracks = _toConsumableArray(tracks).concat([track]);
  }

  return tracks;
}

function parseEvent(reader, lastTypeByte) {
  var deltaTime = reader.midiInt();
  var typeByte = reader.uint8();

  if (typeByte === 0xff) {
    /** meta event */
    var _type = "meta";

    var _subTypeByte = reader.uint8();

    var length = reader.midiInt();

    switch (_subTypeByte) {
      case 0x00:
        if (length !== 2) {
          throw "Expected length for sequenceNumber event is 2, got " + length;
        }

        return {
          type: _type,
          subType: "sequenceNumber",
          typeByte: typeByte,
          subTypeByte: _subTypeByte,
          deltaTime: deltaTime,
          number: reader.uint16()
        };

      case 0x01:
        return {
          type: _type,
          subType: "text",
          typeByte: typeByte,
          subTypeByte: _subTypeByte,
          deltaTime: deltaTime,
          text: reader.string(length)
        };

      case 0x02:
        return {
          type: _type,
          subType: "copyrightNotice",
          typeByte: typeByte,
          subTypeByte: _subTypeByte,
          deltaTime: deltaTime,
          text: reader.string(length)
        };

      case 0x03:
        return {
          type: _type,
          subType: "trackName",
          typeByte: typeByte,
          subTypeByte: _subTypeByte,
          deltaTime: deltaTime,
          text: reader.string(length)
        };

      case 0x04:
        return {
          type: _type,
          subType: "instrumentName",
          typeByte: typeByte,
          subTypeByte: _subTypeByte,
          deltaTime: deltaTime,
          text: reader.string(length)
        };

      case 0x05:
        return {
          type: _type,
          subType: "lyrics",
          typeByte: typeByte,
          subTypeByte: _subTypeByte,
          deltaTime: deltaTime,
          text: reader.string(length)
        };

      case 0x06:
        return {
          type: _type,
          subType: "marker",
          typeByte: typeByte,
          subTypeByte: _subTypeByte,
          deltaTime: deltaTime,
          text: reader.string(length)
        };

      case 0x07:
        return {
          type: _type,
          subType: "cuePoint",
          typeByte: typeByte,
          subTypeByte: _subTypeByte,
          deltaTime: deltaTime,
          text: reader.string(length)
        };

      case 0x20:
        if (length !== 1) {
          throw "Expected length for midiChannelPrefix event is 1, got " + length;
        }

        return {
          type: _type,
          subType: "midiChannelPrefix",
          typeByte: typeByte,
          subTypeByte: _subTypeByte,
          deltaTime: deltaTime,
          channel: reader.uint8()
        };

      case 0x2f:
        if (length !== 0) {
          throw "Expected length for endOfTrack event is 0, got " + length;
        }

        return {
          type: _type,
          subType: "endOfTrack",
          typeByte: typeByte,
          subTypeByte: _subTypeByte,
          deltaTime: deltaTime
        };

      case 0x51:
        if (length !== 3) {
          throw "Expected length for setTempo event is 3, got " + length;
        }

        return {
          type: _type,
          subType: "setTempo",
          typeByte: typeByte,
          subTypeByte: _subTypeByte,
          deltaTime: deltaTime,
          microsecondsPerBeat: (reader.uint8() << 16) + (reader.uint8() << 8) + reader.uint8()
        };

      case 0x54:
        if (length != 5) {
          throw "Expected length for smpteOffset event is 5, got " + length;
        }

        var hourByte = reader.uint8();
        return {
          type: _type,
          subType: "smpteOffset",
          typeByte: typeByte,
          subTypeByte: _subTypeByte,
          deltaTime: deltaTime,
          frameRate: getFrameRate(hourByte),
          hour: hourByte & 0x1f,
          min: reader.uint8(),
          sec: reader.uint8(),
          frame: reader.uint8(),
          subFrame: reader.uint8()
        };

      case 0x58:
        if (length != 4) {
          throw "Expected length for timeSignature event is 4, got " + length;
        }

        return {
          type: _type,
          subType: "timeSignature",
          typeByte: typeByte,
          subTypeByte: _subTypeByte,
          deltaTime: deltaTime,
          numerator: reader.uint8(),
          denominator: Math.pow(2, reader.uint8()),
          metronome: reader.uint8(),
          thirtySeconds: reader.uint8()
        };

      case 0x59:
        if (length != 2) {
          throw "Expected length for keySignature event is 2, got " + length;
        }

        return {
          type: _type,
          subType: "keySignature",
          typeByte: typeByte,
          subTypeByte: _subTypeByte,
          deltaTime: deltaTime,
          key: reader.int8(),
          scale: reader.uint8()
        };

      case 0x7f:
        return {
          type: _type,
          subType: "sequencerSpecific",
          typeByte: typeByte,
          subTypeByte: _subTypeByte,
          deltaTime: deltaTime,
          data: reader.read(length)
        };

      default:
        return {
          type: _type,
          subType: undefined,
          typeByte: typeByte,
          subTypeByte: _subTypeByte,
          deltaTime: deltaTime,
          data: reader.read(length)
        };
    }
  } else if (typeByte === 0xf0) {
    /** system event */
    var _length = reader.midiInt();

    return {
      type: "sysEx",
      subType: undefined,
      typeByte: typeByte,
      deltaTime: deltaTime,
      data: reader.read(_length)
    };
  } else if (typeByte === 0xf7) {
    /** divided system event */
    var _length2 = reader.midiInt();

    return {
      type: "dividedSysEx",
      subType: undefined,
      typeByte: typeByte,
      deltaTime: deltaTime,
      data: reader.read(_length2)
    };
  } else {
    /** midi event */
    var _type2 = "midi";
    /**
     * running status - reuse lastEventTypeByte as the event type
     * typeByte is actually the first parameter
     */

    var isRunningStatus = (typeByte & 128) === 0;

    var _value = isRunningStatus ? typeByte : reader.uint8();

    typeByte = isRunningStatus ? lastTypeByte === undefined ? 0 : lastTypeByte : typeByte;

    var _channel = typeByte & 0x0f;

    switch (typeByte >> 4) {
      case 0x08:
        return {
          type: _type2,
          subType: "noteOff",
          typeByte: typeByte,
          deltaTime: deltaTime,
          channel: _channel,
          note: _value,
          velocity: reader.uint8()
        };

      case 0x09:
        var _velocity = reader.uint8();

        return {
          type: _type2,
          subType: _velocity === 0 ? "noteOff" : "noteOn",
          typeByte: typeByte,
          deltaTime: deltaTime,
          channel: _channel,
          note: _value,
          velocity: _velocity
        };

      case 0x0a:
        return {
          type: _type2,
          subType: "noteAftertouch",
          typeByte: typeByte,
          deltaTime: deltaTime,
          channel: _channel,
          note: _value,
          amount: reader.uint8()
        };

      case 0x0b:
        return {
          type: _type2,
          subType: "controller",
          typeByte: typeByte,
          deltaTime: deltaTime,
          channel: _channel,
          controllerType: _value,
          value: reader.uint8()
        };

      case 0x0c:
        return {
          type: _type2,
          subType: "programChange",
          typeByte: typeByte,
          deltaTime: deltaTime,
          channel: _channel,
          program: _value
        };

      case 0x0d:
        return {
          type: _type2,
          subType: "channelAftertouch",
          typeByte: typeByte,
          deltaTime: deltaTime,
          channel: _channel,
          amount: _value
        };

      case 0x0e:
        return {
          type: _type2,
          subType: "pitchBend",
          typeByte: typeByte,
          deltaTime: deltaTime,
          channel: _channel,
          value: _value + (reader.uint8() << 7)
        };
    }
  }

  throw "Unrecognised MIDI event type byte: " + typeByte;
}

function getFrameRate(hourByte) {
  switch (hourByte & 96) {
    case 0x00:
      return 24;

    case 0x20:
      return 25;

    case 0x40:
      return 29;

    case 0x60:
      return 30;

    default:
      return 0;
  }
}

/***/ }),

/***/ "./src/MIDIToXML.ts":
/*!**************************!*\
  !*** ./src/MIDIToXML.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getXML = void 0;
const xml_writer_1 = __importDefault(__webpack_require__(/*! xml-writer */ "./node_modules/xml-writer/index.js"));
const jasmid_ts_1 = __webpack_require__(/*! jasmid.ts */ "./node_modules/jasmid.ts/lib/index.js");
const midi_tools_1 = __webpack_require__(/*! @thayes/midi-tools */ "../midi-tools/build/midi-tools.js");
const midi_instruments_1 = __webpack_require__(/*! ./midi-instruments */ "./src/midi-instruments.ts");
function writeNotes({ notes, writer, divisions, timeSignature }) {
    let measureNumber = 0;
    notes.forEach(({ note, duration }) => {
        measureNumber += 1;
        const noteDescription = (0, midi_tools_1.NoteNumberToName)(note);
        // <key>
        //   <fifths>-3</fifths>
        //   <mode>minor</mode>
        // </key>
        writer.startElement("measure").writeAttribute("number", measureNumber);
        if (measureNumber === 1) {
            writer.startElement("attributes");
            writer.writeElement("divisions", divisions);
            writer.startElement("time");
            writer.writeElement("beats", timeSignature.numerator);
            writer.writeElement("beat-type", timeSignature.denominator);
            writer.endElement(); // </time>
            writer.startElement("key");
            writer.writeElement("fifths", -3);
            writer.writeElement("mode", "minor");
            writer.endElement(); // </key>
            writer.startElement("clef");
            writer.writeElement("sign", "G");
            writer.writeElement("line", 2);
            writer.endElement(); // </clef>
            writer.endElement(); // </attributes>
        }
        writer.startElement("note");
        writer.startElement("pitch");
        writer.writeElement("step", noteDescription.step);
        writer.writeElement("octave", noteDescription.octave);
        if (noteDescription.alter) {
            writer.writeElement("alter", noteDescription.alter);
        }
        writer.endElement(); // </pitch>
        writer.writeElement("duration", duration);
        writer.endElement(); // </note>
        writer.endElement(); // </measure>
    });
}
function toMusicXML({ header, tracks }) {
    const ticksPerBeat = header.ticksPerBeat;
    const notesByTrack = [];
    const currentNotesByTrack = {};
    const instrumentIdsByChannel = {};
    for (let channel = 0; channel < 16; channel++) {
        instrumentIdsByChannel[channel] = 1; // default to instrument 1
    }
    const track = tracks[0];
    let timeSignature = {
        numerator: null,
        denominator: null,
    };
    tracks.forEach((track, trackNumber) => {
        currentNotesByTrack[trackNumber] = [];
        track.forEach((event) => {
            if (event.deltaTime > 0) {
                currentNotesByTrack[trackNumber].forEach((note) => note.duration += event.deltaTime);
            }
            const channel = event.channel;
            if (event.subType === "programChange") {
                const program = event.program;
                if (program === 0) {
                    console.log("setting program to 0", event);
                }
                instrumentIdsByChannel[channel] = program;
            }
            if (event.type === "meta") {
                if (event.subType === "timeSignature") {
                    timeSignature.numerator = event.numerator;
                    timeSignature.denominator = event.denominator;
                }
            }
            if (event.subType === "noteOn") {
                currentNotesByTrack[trackNumber].push({
                    note: event.note,
                    channel,
                    duration: 0,
                    instrumentId: instrumentIdsByChannel[channel],
                });
            }
            else if (event.subType === "noteOff") {
                const noteIndex = currentNotesByTrack[trackNumber].findIndex(({ note }) => note === event.note);
                if (noteIndex < 0) {
                    // should never happen--means we have a noteOff for a note that has not had a noteOn
                    return;
                }
                if (!(trackNumber in notesByTrack)) {
                    notesByTrack[trackNumber] = [];
                }
                notesByTrack[trackNumber].push({
                    note: currentNotesByTrack[trackNumber][noteIndex].note,
                    channel: currentNotesByTrack[trackNumber][noteIndex].channel,
                    duration: currentNotesByTrack[trackNumber][noteIndex].duration,
                    instrumentId: currentNotesByTrack[trackNumber][noteIndex].instrumentId,
                });
                currentNotesByTrack[trackNumber].splice(noteIndex, 1);
            }
        });
    });
    let measureNumber = 0;
    const now = new Date();
    const year = now.getFullYear();
    let month = (now.getMonth() + 1).toString();
    if (month.length === 1) {
        month = "0" + month;
    }
    let date = now.getDate().toString();
    if (date.length === 1) {
        date = "0" + date;
    }
    const writer = new xml_writer_1.default("  ");
    writer.startDocument("1.0", "UTF-8", false);
    writer.writeDocType("score-partwise", "-//Recordare//DTD MusicXML 3.1 Partwise//EN", "http://www.musicxml.org/dtds/partwise.dtd");
    writer.startElement("score-partwise").writeAttribute("version", "3.1");
    writer.startElement("work");
    writer.writeElement("work-title", "Generated Score");
    writer.endElement(); // </work>
    writer.startElement("identification");
    writer.startElement("encoding");
    writer.writeElement("encoding-date", [year, month, date].join("-"));
    writer.endElement(); // </encoding>
    writer.endElement(); // </identification>
    writer.startElement("part-list");
    Object.keys(notesByTrack).forEach((trackNumber) => {
        const partId = `P${trackNumber}`;
        const instrumentId = notesByTrack[trackNumber][0].instrumentId;
        const instrumentName = (0, midi_instruments_1.getInstrumentName)({ instrumentId });
        console.log({
            instrumentId,
            instrumentName,
        });
        const instrumentIdString = `${partId}-I1`;
        writer.startElement("score-part")
            .writeAttribute("id", partId);
        writer.startElement("part-name").text(instrumentName).endElement();
        writer.startElement("score-instrument").writeAttribute("id", instrumentIdString);
        writer.writeElement("instrument-name", instrumentName);
        writer.endElement(); // </score-instrument>
        writer.startElement("midi-instrument").writeAttribute("id", instrumentIdString);
        writer.endElement(); // </midi-instrument>
        writer.endElement(); // </score-part>
    });
    writer.endElement(); // </part-list>
    Object.keys(notesByTrack).forEach((trackNumber) => {
        const notes = notesByTrack[trackNumber];
        writer.startElement("part").writeAttribute("id", `P${trackNumber}`);
        writeNotes({ notes, writer, divisions: ticksPerBeat, timeSignature });
        writer.endElement(); // </part>
    });
    writer.endElement(); // </score-partwise>
    writer.endDocument();
    return writer.toString();
}
const getXML = (midi) => {
    return toMusicXML((0, jasmid_ts_1.parseMidiFile)(midi));
};
exports.getXML = getXML;


/***/ }),

/***/ "./src/midi-instruments.ts":
/*!*********************************!*\
  !*** ./src/midi-instruments.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getInstrumentName = void 0;
const instruments = {
    "1": {
        "name": "Acoustic Grand Piano",
    },
    "2": {
        "name": "Bright Acoustic Piano",
    },
    "3": {
        "name": "Electric Grand Piano",
    },
    "4": {
        "name": "Honky-tonk Piano",
    },
    "5": {
        "name": "Electric Piano 1",
    },
    "6": {
        "name": "Electric Piano 2",
    },
    "7": {
        "name": "Harpsichord",
    },
    "8": {
        "name": "Clavi",
    },
    "9": {
        "name": "Celesta",
    },
    "10": {
        "name": "Glockenspiel",
    },
    "11": {
        "name": "Music Box",
    },
    "12": {
        "name": "Vibraphone",
    },
    "13": {
        "name": "Marimba",
    },
    "14": {
        "name": "Xylophone",
    },
    "15": {
        "name": "Tubular Bells",
    },
    "16": {
        "name": "Dulcimer",
    },
    "17": {
        "name": "Drawbar Organ",
    },
    "18": {
        "name": "Percussive Organ",
    },
    "19": {
        "name": "Rock Organ",
    },
    "20": {
        "name": "Church Organ",
    },
    "21": {
        "name": "Reed Organ",
    },
    "22": {
        "name": "Accordion",
    },
    "23": {
        "name": "Harmonica",
    },
    "24": {
        "name": "Tango Accordion",
    },
    "25": {
        "name": "Acoustic Guitar (nylon)",
    },
    "26": {
        "name": "Acoustic Guitar (steel)",
    },
    "27": {
        "name": "Electric Guitar (jazz)",
    },
    "28": {
        "name": "Electric Guitar (clean)",
    },
    "29": {
        "name": "Electric Guitar (muted)",
    },
    "30": {
        "name": "Overdriven Guitar",
    },
    "31": {
        "name": "Distortion Guitar",
    },
    "32": {
        "name": "Guitar harmonics",
    },
    "33": {
        "name": "Acoustic Bass",
    },
    "34": {
        "name": "Electric Bass (finger)",
    },
    "35": {
        "name": "Electric Bass (pick)",
    },
    "36": {
        "name": "Fretless Bass",
    },
    "37": {
        "name": "Slap Bass 1",
    },
    "38": {
        "name": "Slap Bass 2",
    },
    "39": {
        "name": "Synth Bass 1",
    },
    "40": {
        "name": "Synth Bass 2",
    },
    "41": {
        "name": "Violin",
    },
    "42": {
        "name": "Viola",
    },
    "43": {
        "name": "Cello",
    },
    "44": {
        "name": "Contrabass",
    },
    "45": {
        "name": "Tremolo Strings",
    },
    "46": {
        "name": "Pizzicato Strings",
    },
    "47": {
        "name": "Orchestral Harp",
    },
    "48": {
        "name": "Timpani",
    },
    "49": {
        "name": "String Ensemble 1",
    },
    "50": {
        "name": "String Ensemble 2",
    },
    "51": {
        "name": "SynthStrings 1",
    },
    "52": {
        "name": "SynthStrings 2",
    },
    "53": {
        "name": "Choir Aahs",
    },
    "54": {
        "name": "Voice Oohs",
    },
    "55": {
        "name": "Synth Voice",
    },
    "56": {
        "name": "Orchestra Hit",
    },
    "57": {
        "name": "Trumpet",
    },
    "58": {
        "name": "Trombone",
    },
    "59": {
        "name": "Tuba",
    },
    "60": {
        "name": "Muted Trumpet",
    },
    "61": {
        "name": "French Horn",
    },
    "62": {
        "name": "Brass Section",
    },
    "63": {
        "name": "SynthBrass 1",
    },
    "64": {
        "name": "SynthBrass 2",
    },
    "65": {
        "name": "Soprano Sax",
    },
    "66": {
        "name": "Alto Sax",
    },
    "67": {
        "name": "Tenor Sax",
    },
    "68": {
        "name": "Baritone Sax",
    },
    "69": {
        "name": "Oboe",
    },
    "70": {
        "name": "English Horn",
    },
    "71": {
        "name": "Bassoon",
    },
    "72": {
        "name": "Clarinet",
    },
    "73": {
        "name": "Piccolo",
    },
    "74": {
        "name": "Flute",
    },
    "75": {
        "name": "Recorder",
    },
    "76": {
        "name": "Pan Flute",
    },
    "77": {
        "name": "Blown Bottle",
    },
    "78": {
        "name": "Shakuhachi",
    },
    "79": {
        "name": "Whistle",
    },
    "80": {
        "name": "Ocarina",
    },
    "81": {
        "name": "Lead 1 (square)",
    },
    "82": {
        "name": "Lead 2 (sawtooth)",
    },
    "83": {
        "name": "Lead 3 (calliope)",
    },
    "84": {
        "name": "Lead 4 (chiff)",
    },
    "85": {
        "name": "Lead 5 (charang)",
    },
    "86": {
        "name": "Lead 6 (voice)",
    },
    "87": {
        "name": "Lead 7 (fifths)",
    },
    "88": {
        "name": "Lead 8 (bass + lead)",
    },
    "89": {
        "name": "Pad 1 (new age)",
    },
    "90": {
        "name": "Pad 2 (warm)",
    },
    "91": {
        "name": "Pad 3 (polysynth)",
    },
    "92": {
        "name": "Pad 4 (choir)",
    },
    "93": {
        "name": "Pad 5 (bowed)",
    },
    "94": {
        "name": "Pad 6 (metallic)",
    },
    "95": {
        "name": "Pad 7 (halo)",
    },
    "96": {
        "name": "Pad 8 (sweep)",
    },
    "97": {
        "name": "FX 1 (rain)",
    },
    "98": {
        "name": "FX 2 (soundtrack)",
    },
    "99": {
        "name": "FX 3 (crystal)",
    },
    "100": {
        "name": "FX 4 (atmosphere)",
    },
    "101": {
        "name": "FX 5 (brightness)",
    },
    "102": {
        "name": "FX 6 (goblins)",
    },
    "103": {
        "name": "FX 7 (echoes)",
    },
    "104": {
        "name": "FX 8 (sci-fi)",
    },
    "105": {
        "name": "Sitar",
    },
    "106": {
        "name": "Banjo",
    },
    "107": {
        "name": "Shamisen",
    },
    "108": {
        "name": "Koto",
    },
    "109": {
        "name": "Kalimba",
    },
    "110": {
        "name": "Bag pipe",
    },
    "111": {
        "name": "Fiddle",
    },
    "112": {
        "name": "Shanai",
    },
    "113": {
        "name": "Tinkle Bell",
    },
    "114": {
        "name": "Agogo",
    },
    "115": {
        "name": "Steel Drums",
    },
    "116": {
        "name": "Woodblock",
    },
    "117": {
        "name": "Taiko Drum",
    },
    "118": {
        "name": "Melodic Tom",
    },
    "119": {
        "name": "Synth Drum",
    },
    "120": {
        "name": "Reverse Cymbal",
    },
    "121": {
        "name": "Guitar Fret Noise",
    },
    "122": {
        "name": "Breath Noise",
    },
    "123": {
        "name": "Seashore",
    },
    "124": {
        "name": "Bird Tweet",
    },
    "125": {
        "name": "Telephone Ring",
    },
    "126": {
        "name": "Helicopter",
    },
    "127": {
        "name": "Applause",
    },
    "128": {
        "name": "Gunshot",
    },
};
function getInstrumentName({ instrumentId }) {
    instrumentId += 1;
    console.log({
        instrumentId,
    });
    if (!(instrumentId in instruments)) {
        return undefined;
    }
    return instruments[instrumentId].name;
}
exports.getInstrumentName = getInstrumentName;


/***/ }),

/***/ "./node_modules/xml-writer/index.js":
/*!******************************************!*\
  !*** ./node_modules/xml-writer/index.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! ./lib/xml-writer.js */ "./node_modules/xml-writer/lib/xml-writer.js");


/***/ }),

/***/ "./node_modules/xml-writer/lib/xml-writer.js":
/*!***************************************************!*\
  !*** ./node_modules/xml-writer/lib/xml-writer.js ***!
  \***************************************************/
/***/ ((module) => {


function isFalse(s) {
  return typeof s !== 'number' && !s;
}

function strval(s) {
  if (typeof s == 'string') {
    return s;
  }
  else if (typeof s == 'number') {
    return s+'';
  }
  else if (typeof s == 'function') {
    return s();
  }
  else if (s instanceof XMLWriter) {
    return s.toString();
  }
  else throw Error('Bad Parameter');
}

function XMLWriter(indent, callback) {

    if (!(this instanceof XMLWriter)) {
        return new XMLWriter();
    }

    this.name_regex = /[_:A-Za-z][-._:A-Za-z0-9]*/;
    this.indent = indent ? true : false;
    this.indentString = this.indent && typeof indent === 'string' ? indent : '    ';
    this.output = '';
    this.stack = [];
    this.tags = 0;
    this.attributes = 0;
    this.attribute = 0;
    this.texts = 0;
    this.comment = 0;
    this.dtd = 0;
    this.root = '';
    this.pi = 0;
    this.cdata = 0;
    this.started_write = false;
    this.writer;
    this.writer_encoding = 'UTF-8';

    if (typeof callback == 'function') {
        this.writer = callback;
    } else {
        this.writer = function (s, e) {
            this.output += s;
        }
    }
}

XMLWriter.prototype = {
    toString : function () {
        this.flush();
        return this.output;
    },

    indenter : function () {
      if (this.indent) {
        this.write('\n');
        for (var i = 1; i < this.tags; i++) {
          this.write(this.indentString);
        }
      }
    },

    write : function () {
        for (var i = 0; i < arguments.length; i++) {
            this.writer(arguments[i], this.writer_encoding);
        }
    },


    flush : function () {
        for (var i = this.tags; i > 0; i--) {
            this.endElement();
        }
        this.tags = 0;
    },

    startDocument : function (version, encoding, standalone) {
        if (this.tags || this.attributes) return this;

        this.startPI('xml');
        this.startAttribute('version');
        this.text(typeof version == "string" ? version : "1.0");
        this.endAttribute();
        if (typeof encoding == "string") {
            this.startAttribute('encoding');
            this.text(encoding);
            this.endAttribute();
            this.writer_encoding = encoding;
        }
        if (standalone) {
            this.startAttribute('standalone');
            this.text("yes");
            this.endAttribute();
        }
        this.endPI();
        if (!this.indent) {
          this.write('\n');
        }
        return this;
    },

    endDocument : function () {
        if (this.attributes) this.endAttributes();
        return this;
    },

    writeElement : function (name, content) {
        return this.startElement(name).text(content).endElement();
    },

    writeElementNS : function (prefix, name, uri, content) {
        if (!content) {
            content = uri;
        }
        return this.startElementNS(prefix, name, uri).text(content).endElement();
    },

    startElement : function (name) {
        name = strval(name);
        if (!name.match(this.name_regex)) throw Error('Invalid Parameter');
        if (this.tags === 0 && this.root && this.root !== name) throw Error('Invalid Parameter');
        if (this.attributes) this.endAttributes();
        ++this.tags;
        this.texts = 0;
        if (this.stack.length > 0)
          this.stack[this.stack.length-1].containsTag = true;

        this.stack.push({
            name: name,
            tags: this.tags
        });
        if (this.started_write) this.indenter();
        this.write('<', name);
        this.startAttributes();
        this.started_write = true;
        return this;
    },
    startElementNS : function (prefix, name, uri) {
        prefix = strval(prefix);
        name = strval(name);

        if (!prefix.match(this.name_regex)) throw Error('Invalid Parameter');
        if (!name.match(this.name_regex)) throw Error('Invalid Parameter');
        if (this.attributes) this.endAttributes();
        ++this.tags;
        this.texts = 0;
        if (this.stack.length > 0)
          this.stack[this.stack.length-1].containsTag = true;

        this.stack.push({
            name: prefix + ':' + name,
            tags: this.tags
        });
        if (this.started_write) this.indenter();
        this.write('<', prefix + ':' + name);
        this.startAttributes();
        this.started_write = true;
        return this;
    },

    endElement : function () {
        if (!this.tags) return this;
        var t = this.stack.pop();
        if (this.attributes > 0) {
            if (this.attribute) {
                if (this.texts) this.endAttribute();
                this.endAttribute();
            }
            this.write('/');
            this.endAttributes();
        } else {
            if (t.containsTag) this.indenter();
            this.write('</', t.name, '>');
        }
        --this.tags;
        this.texts = 0;
        return this;
    },

    writeAttribute : function (name, content) {
        if (typeof content == 'function') {
          content = content();
        }
        if (isFalse(content)) {
           return this;
        }
        return this.startAttribute(name).text(content).endAttribute();
    },
    writeAttributeNS : function (prefix, name, uri, content) {
        if (!content) {
            content = uri;
        }
        if (typeof content == 'function') {
          content = content();
        }
        if (isFalse(content)) {
          return this;
        }
        return this.startAttributeNS(prefix, name, uri).text(content).endAttribute();
    },

    startAttributes : function () {
        this.attributes = 1;
        return this;
    },

    endAttributes : function () {
        if (!this.attributes) return this;
        if (this.attribute) this.endAttribute();
        this.attributes = 0;
        this.attribute = 0;
        this.texts = 0;
        this.write('>');
        return this;
    },

    startAttribute : function (name) {
        name = strval(name);
        if (!name.match(this.name_regex)) throw Error('Invalid Parameter');
        if (!this.attributes && !this.pi) return this;
        if (this.attribute) return this;
        this.attribute = 1;
        this.write(' ', name, '="');
        return this;
    },
    startAttributeNS : function (prefix, name, uri) {
        prefix = strval(prefix);
        name = strval(name);

        if (!prefix.match(this.name_regex)) throw Error('Invalid Parameter');
        if (!name.match(this.name_regex)) throw Error('Invalid Parameter');
        if (!this.attributes && !this.pi) return this;
        if (this.attribute) return this;
        this.attribute = 1;
        this.write(' ', prefix + ':' + name, '="');
        return this;
    },
    endAttribute : function () {
        if (!this.attribute) return this;
        this.attribute = 0;
        this.texts = 0;
        this.write('"');
        return this;
    },

    text : function (content) {
        content = strval(content);
        if (!this.tags && !this.comment && !this.pi && !this.cdata) return this;
        if (this.attributes && this.attribute) {
            ++this.texts;
            this.write(content
                       .replace(/&/g, '&amp;')
                       .replace(/</g, '&lt;')
                       .replace(/"/g, '&quot;')
                       .replace(/\t/g, '&#x9;')
                       .replace(/\n/g, '&#xA;')
                       .replace(/\r/g, '&#xD;')
                      );
            return this;
        } else if (this.attributes && !this.attribute) {
            this.endAttributes();
        }
        if (this.comment || this.cdata) {
            this.write(content);
        }
        else {
          this.write(content.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;'));
        }
        ++this.texts;
        this.started_write = true;
        return this;
    },

    writeComment : function (content) {
        return this.startComment().text(content).endComment();
    },

    startComment : function () {
        if (this.comment) return this;
        if (this.attributes) this.endAttributes();
        this.indenter();
        this.write('<!--');
        this.comment = 1;
        this.started_write = true;
        return this;
    },

    endComment : function () {
        if (!this.comment) return this;
        this.write('-->');
        this.comment = 0;
        return this;
    },

    writeDocType : function (name, pubid, sysid, subset) {
        return this.startDocType(name, pubid, sysid, subset).endDocType()
    },

    startDocType : function (name, pubid, sysid, subset) {
        if (this.dtd || this.tags) return this;

        name = strval(name);
        pubid = pubid ? strval(pubid) : pubid;
        sysid = sysid ? strval(sysid) : sysid;
        subset = subset ? strval(subset) : subset;

        if (!name.match(this.name_regex)) throw Error('Invalid Parameter');
        if (pubid && !pubid.match(/^[\w\-][\w\s\-\/\+\:\.]*/)) throw Error('Invalid Parameter');
        if (sysid && !sysid.match(/^[\w\.][\w\-\/\\\:\.]*/)) throw Error('Invalid Parameter');
        if (subset && !subset.match(/[\w\s\<\>\+\.\!\#\-\?\*\,\(\)\|]*/)) throw Error('Invalid Parameter');

        pubid = pubid ? ' PUBLIC "' + pubid + '"' : (sysid) ? ' SYSTEM' : '';
        sysid = sysid ? ' "' + sysid + '"' : '';
        subset = subset ? ' [' + subset + ']': '';

        if (this.started_write) this.indenter();
        this.write('<!DOCTYPE ', name, pubid, sysid, subset);
        this.root = name;
        this.dtd = 1;
        this.started_write = true;
        return this;
    },

    endDocType : function () {
        if (!this.dtd) return this;
        this.write('>');
        return this;
    },

    writePI : function (name, content) {
        return this.startPI(name).text(content).endPI()
    },

    startPI : function (name) {
        name = strval(name);
        if (!name.match(this.name_regex)) throw Error('Invalid Parameter');
        if (this.pi) return this;
        if (this.attributes) this.endAttributes();
        if (this.started_write) this.indenter();
        this.write('<?', name);
        this.pi = 1;
        this.started_write = true;
        return this;
    },

    endPI : function () {
        if (!this.pi) return this;
        this.write('?>');
        this.pi = 0;
        return this;
    },

    writeCData : function (content) {
        return this.startCData().text(content).endCData();
    },

    startCData : function () {
        if (this.cdata) return this;
        if (this.attributes) this.endAttributes();
        this.indenter();
        this.write('<![CDATA[');
        this.cdata = 1;
        this.started_write = true;
        return this;
    },

    endCData : function () {
        if (!this.cdata) return this;
        this.write(']]>');
        this.cdata = 0;
        return this;
    },

    writeRaw : function(content) {
        content = strval(content);
        if (!this.tags && !this.comment && !this.pi && !this.cdata) return this;
        if (this.attributes && this.attribute) {
            ++this.texts;
            this.write(content.replace('&', '&amp;').replace('"', '&quot;'));
            return this;
        } else if (this.attributes && !this.attribute) {
            this.endAttributes();
        }
        ++this.texts;
        this.write(content);
        this.started_write = true;
        return this;
    }

}

module.exports = XMLWriter;


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
var exports = __webpack_exports__;
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getXML = void 0;
var MIDIToXML_1 = __webpack_require__(/*! ./MIDIToXML */ "./src/MIDIToXML.ts");
Object.defineProperty(exports, "getXML", ({ enumerable: true, get: function () { return MIDIToXML_1.getXML; } }));

})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,